
SWEN-340 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003710  08003710  00027d30  2**0
                  CONTENTS
  4 .ARM          00000000  08003710  08003710  00027d30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003710  08003710  00027d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007d30  20000000  08003718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  20007d30  0800b448  00027d30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008680  0800b448  00028680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027d30  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027d60  2**0
                  CONTENTS, READONLY
 13 .debug_info   000068e2  00000000  00000000  00027da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5a  00000000  00000000  0002e685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  000305e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d7  00000000  00000000  00030cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000293e  00000000  00000000  000311af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c470  00000000  00000000  00033aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5881  00000000  00000000  0003ff5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cfc  00000000  00000000  001357e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001374dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007d30 	.word	0x20007d30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003528 	.word	0x08003528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007d34 	.word	0x20007d34
 80001cc:	08003528 	.word	0x08003528

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <GPIO_Init+0xb8>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <GPIO_Init+0xb8>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <GPIO_Init+0xb8>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <GPIO_Init+0xb8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <GPIO_Init+0xb8>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <GPIO_Init+0xb8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <GPIO_Init+0xb8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <GPIO_Init+0xb8>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <GPIO_Init+0xb8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <GPIO_Init+0xb8>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <GPIO_Init+0xb8>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <GPIO_Init+0xb8>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <GPIO_Init+0xbc>)
 8000b6a:	f001 fe3b 	bl	80027e4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b74:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 fe2c 	bl	80027e4 <HAL_GPIO_Init>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000800 	.word	0x48000800

08000b9c <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <LED_Init+0xb8>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <LED_Init+0xb8>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2103      	movs	r1, #3
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000be2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2103      	movs	r1, #3
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2103      	movs	r1, #3
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c10:	4313      	orrs	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c28:	4013      	ands	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2103      	movs	r1, #3
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c42:	4013      	ands	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
	
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(int pin){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	GPIOA->ODR |= (1UL<<pin);
 8000c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c64:	695a      	ldr	r2, [r3, #20]
 8000c66:	2101      	movs	r1, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c72:	4313      	orrs	r3, r2
 8000c74:	614b      	str	r3, [r1, #20]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(int pin){
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1UL<<pin);
 8000c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	2101      	movs	r1, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	614b      	str	r3, [r1, #20]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 8000cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000cc8:	4053      	eors	r3, r2
 8000cca:	614b      	str	r3, [r1, #20]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <UART2_Init+0x40>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <UART2_Init+0x40>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <UART2_Init+0x40>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <UART2_Init+0x40>)
 8000cf0:	f023 030c 	bic.w	r3, r3, #12
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <UART2_Init+0x40>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <UART2_Init+0x40>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000d08:	f000 f80a 	bl	8000d20 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <UART2_Init+0x44>)
 8000d0e:	f000 f84f 	bl	8000db0 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40004400 	.word	0x40004400

08000d20 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <UART2_GPIO_Init+0x8c>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <UART2_GPIO_Init+0x8c>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d3e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d4a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d4e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000d50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d54:	6a1b      	ldr	r3, [r3, #32]
 8000d56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000d5e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d6a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000d6e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d7a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000d7e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000d80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d8e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d9a:	f023 030c 	bic.w	r3, r3, #12
 8000d9e:	6053      	str	r3, [r2, #4]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 0201 	bic.w	r2, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f242 028d 	movw	r2, #8333	; 0x208d
 8000dee:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f043 020c 	orr.w	r2, r3, #12
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <USART_Init+0x100>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d129      	bne.n	8000e58 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f043 0220 	orr.w	r2, r3, #32
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f023 0210 	bic.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 0201 	bic.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <USART_Init+0x104>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d10b      	bne.n	8000e78 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <USART_Init+0x108>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <USART_Init+0x108>)
 8000e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e76:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f043 0201 	orr.w	r2, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000e84:	bf00      	nop
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000e92:	bf00      	nop
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f9      	beq.n	8000e94 <USART_Init+0xe4>
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40013800 	.word	0x40013800

08000ebc <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000ec4:	bf00      	nop
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f9      	beq.n	8000ec6 <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <USART_Write>:
	}
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e014      	b.n	8000f22 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000ef8:	bf00      	nop
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f9      	beq.n	8000efa <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000f14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f18:	f000 f818 	bl	8000f4c <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d8e6      	bhi.n	8000ef8 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000f2a:	bf00      	nop
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f9      	beq.n	8000f2c <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	61da      	str	r2, [r3, #28]
}   
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2264      	movs	r2, #100	; 0x64
 8000f58:	fb03 f202 	mul.w	r2, r3, r2
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <USART_Delay+0x3c>)
 8000f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f62:	1ad2      	subs	r2, r2, r3
 8000f64:	0852      	lsrs	r2, r2, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000f6c:	bf00      	nop
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <USART_Delay+0x22>
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	24924925 	.word	0x24924925

08000f8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_DAC_MspInit+0x74>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d124      	bne.n	8000ff8 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_DAC_MspInit+0x78>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f001 fbf6 	bl	80027e4 <HAL_GPIO_Init>
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40007400 	.word	0x40007400
 8001004:	40021000 	.word	0x40021000

08001008 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2224      	movs	r2, #36	; 0x24
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f001 feaf 	bl	8002d78 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <DAC_Init+0x5c>)
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <DAC_Init+0x60>)
 800101e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <DAC_Init+0x5c>)
 8001022:	f001 fa31 	bl	8002488 <HAL_DAC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <DAC_Init+0x28>
  {
    Error_Handler();
 800102c:	f001 f91e 	bl	800226c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <DAC_Init+0x5c>)
 800104c:	f001 fab0 	bl	80025b0 <HAL_DAC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <DAC_Init+0x52>
  {
    Error_Handler();
 8001056:	f001 f909 	bl	800226c <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20007d4c 	.word	0x20007d4c
 8001068:	40007400 	.word	0x40007400

0800106c <DAC_Start>:

void DAC_Start () {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <DAC_Start+0x10>)
 8001074:	f001 fa2a 	bl	80024cc <HAL_DAC_Start>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20007d4c 	.word	0x20007d4c

08001080 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <DAC_Set_Value+0x1c>)
 8001090:	f001 fa69 	bl	8002566 <HAL_DAC_SetValue>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20007d4c 	.word	0x20007d4c

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db12      	blt.n	8001114 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <__NVIC_DisableIRQ+0x44>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	3320      	adds	r3, #32
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001108:	f3bf 8f4f 	dsb	sy
}
 800110c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800110e:	f3bf 8f6f 	isb	sy
}
 8001112:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100

08001124 <S1_button_enable>:

static int button_pressed = 0;
static int manual_active = 0;
static int count_start = 0;

void S1_button_enable(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	//enables interrupts for the S1 switch
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001128:	2017      	movs	r0, #23
 800112a:	f7ff ffb9 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}

08001132 <S1_button_disable>:

void S1_button_disable(){
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
	//disables interrupts for the S1 switch
	NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001136:	2017      	movs	r0, #23
 8001138:	f7ff ffd0 	bl	80010dc <__NVIC_DisableIRQ>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	//Interrupt handler for S1 switch
	button_pressed ++;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <EXTI9_5_IRQHandler+0x2c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <EXTI9_5_IRQHandler+0x2c>)
 800114c:	6013      	str	r3, [r2, #0]

	if(button_pressed == 1){
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <EXTI9_5_IRQHandler+0x2c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <EXTI9_5_IRQHandler+0x20>
		count_start = get_count();
 8001156:	f000 fecf 	bl	8001ef8 <get_count>
 800115a:	4603      	mov	r3, r0
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <EXTI9_5_IRQHandler+0x30>)
 800115e:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8001160:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001164:	f001 fce8 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20007d60 	.word	0x20007d60
 8001170:	20007d68 	.word	0x20007d68

08001174 <set_manual_active>:
	//getter for button_pressed
	//output - int of whether the button was pressed in the last second
	return button_pressed;
}

void set_manual_active(){
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	manual_active = 1;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <set_manual_active+0x14>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20007d64 	.word	0x20007d64

0800118c <set_manual_unactive>:

void set_manual_unactive(){
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	manual_active = 0;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <set_manual_unactive+0x14>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20007d64 	.word	0x20007d64

080011a4 <manual_mode_loop>:

void manual_mode_loop(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	//method to allow systick to increment count for the button timer
	while(manual_active == 1){
 80011a8:	e02f      	b.n	800120a <manual_mode_loop+0x66>
		if(count_start != 0){
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <manual_mode_loop+0x78>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d02b      	beq.n	800120a <manual_mode_loop+0x66>
			if((get_count()-count_start) >= 1000000){
 80011b2:	f000 fea1 	bl	8001ef8 <get_count>
 80011b6:	4602      	mov	r2, r0
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <manual_mode_loop+0x78>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <manual_mode_loop+0x7c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dd22      	ble.n	800120a <manual_mode_loop+0x66>
				if(button_pressed > 2){
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <manual_mode_loop+0x80>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dd08      	ble.n	80011de <manual_mode_loop+0x3a>
					next_song();
 80011cc:	f000 fd00 	bl	8001bd0 <next_song>
					button_pressed = 0;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <manual_mode_loop+0x80>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
					count_start = 0;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <manual_mode_loop+0x78>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e015      	b.n	800120a <manual_mode_loop+0x66>
				}else if(button_pressed == 1){
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <manual_mode_loop+0x80>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d109      	bne.n	80011fa <manual_mode_loop+0x56>
					//If button is pressed once it has not been let go, so it is held
					Set_LED_status(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fd72 	bl	8001cd0 <Set_LED_status>
					button_pressed = 0;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <manual_mode_loop+0x80>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
					count_start = 0;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <manual_mode_loop+0x78>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <manual_mode_loop+0x66>
				}else{
					//handler for one button press
					count_start = 0;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <manual_mode_loop+0x78>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
					button_pressed = 0;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <manual_mode_loop+0x80>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
					Toggle_LED_status();
 8001206:	f000 fd19 	bl	8001c3c <Toggle_LED_status>
	while(manual_active == 1){
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <manual_mode_loop+0x84>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d0cb      	beq.n	80011aa <manual_mode_loop+0x6>
				}
			}
		}
	}
	read_input();
 8001212:	f000 fd87 	bl	8001d24 <read_input>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20007d68 	.word	0x20007d68
 8001220:	000f423f 	.word	0x000f423f
 8001224:	20007d60 	.word	0x20007d60
 8001228:	20007d64 	.word	0x20007d64

0800122c <__NVIC_EnableIRQ>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_DisableIRQ>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db12      	blt.n	80012a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	490a      	ldr	r1, [pc, #40]	; (80012ac <__NVIC_DisableIRQ+0x44>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	3320      	adds	r3, #32
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001294:	f3bf 8f4f 	dsb	sy
}
 8001298:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800129a:	f3bf 8f6f 	isb	sy
}
 800129e:	bf00      	nop
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <setup_USART>:
#include <stm32l4xx.h>


static uint8_t byte;

void setup_USART(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	//enables interrupts for USART2 using NVIC, then then enables interrupts for the RXNIE bit
	NVIC_EnableIRQ(USART2_IRQn);
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f7ff ffb9 	bl	800122c <__NVIC_EnableIRQ>
	USART2->CR1 |= USART_CR1_RXNEIE_Msk;
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <setup_USART+0x1c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <setup_USART+0x1c>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004400 	.word	0x40004400

080012d0 <disable_USART>:

void disable_USART(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	//disables USART interrupts
	NVIC_DisableIRQ(USART2_IRQn);
 80012d4:	2026      	movs	r0, #38	; 0x26
 80012d6:	f7ff ffc7 	bl	8001268 <__NVIC_DisableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <enable_USART>:

void enable_USART(){
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
	//enables USART interrupts
	NVIC_EnableIRQ(USART2_IRQn);
 80012e2:	2026      	movs	r0, #38	; 0x26
 80012e4:	f7ff ffa2 	bl	800122c <__NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <USART2_IRQHandler>:



void USART2_IRQHandler(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	//USART2 interrupt handler
	//reads a byte then prints it
	byte = USART_Read(USART2);
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <USART2_IRQHandler+0x2c>)
 80012f2:	f7ff fde3 	bl	8000ebc <USART_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <USART2_IRQHandler+0x30>)
 80012fc:	701a      	strb	r2, [r3, #0]
	USART_Write(USART2, &byte, 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	4906      	ldr	r1, [pc, #24]	; (800131c <USART2_IRQHandler+0x30>)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <USART2_IRQHandler+0x2c>)
 8001304:	f7ff fdef 	bl	8000ee6 <USART_Write>
	fill_buffer(byte);
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <USART2_IRQHandler+0x30>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fcef 	bl	8001cf0 <fill_buffer>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	20007d6c 	.word	0x20007d6c

08001320 <convert_to_uint16>:
 */

#include <stdio.h>
#include <stdint.h>

uint16_t convert_to_uint16 (uint8_t* p_value){
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint16_t value = (p_value[0] & 0xFF) << 8;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	81fb      	strh	r3, [r7, #14]
	value += (p_value[1] & 0xFF);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3301      	adds	r3, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	4413      	add	r3, r2
 800133e:	81fb      	strh	r3, [r7, #14]
	return value;
 8001340:	89fb      	ldrh	r3, [r7, #14]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <__NVIC_EnableIRQ>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <setup>:
#include "main.h"
#include "project.h"
#include "USARTinterrupt.h"
#include <stm32l4xx.h>

void setup(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	//Sets up interrupts for blue button on board
	GPIO_Init();
 8001390:	f7ff fba4 	bl	8000adc <GPIO_Init>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001394:	2028      	movs	r0, #40	; 0x28
 8001396:	f7ff ffdb 	bl	8001350 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(){
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
	//Handler for when the button gets pressed
	Set_LED_status(0);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 fc94 	bl	8001cd0 <Set_LED_status>
	toggle_mode();
 80013a8:	f000 fbe0 	bl	8001b6c <toggle_mode>
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b0:	f001 fbc2 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <get_header>:
	char song_name[80];
	char copyright[80];
	uint32_t tempo;
};

struct header* get_header(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
	unsigned char* song = get_song(get_song_num()).p_song;
 80013be:	f000 fbfb 	bl	8001bb8 <get_song_num>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	463b      	mov	r3, r7
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd5c 	bl	8001e88 <get_song>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
	struct header* curr_header = (struct header*) song;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	60bb      	str	r3, [r7, #8]
	return curr_header;
 80013d8:	68bb      	ldr	r3, [r7, #8]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <get_tempo>:

//getter for tempo of a song
//output int tempo - tempo found in midi file
int get_tempo(unsigned char* song, int size){
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<=size; i++){
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e02c      	b.n	800144c <get_tempo+0x6a>
		if(song[i] == (char)0xFF){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d123      	bne.n	8001446 <get_tempo+0x64>
			i++;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
			if(song[i] == (char)0x51){
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b51      	cmp	r3, #81	; 0x51
 800140e:	d11a      	bne.n	8001446 <get_tempo+0x64>
				i+=2;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3302      	adds	r3, #2
 8001414:	60fb      	str	r3, [r7, #12]
				int tempo = ((int)(song[i])*65536)+((int)(song[i+1])*256)+((int)(song[i+2]));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	3201      	adds	r2, #1
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	440a      	add	r2, r1
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	4413      	add	r3, r2
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	3202      	adds	r2, #2
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	440a      	add	r2, r1
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	4413      	add	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
				i+=3;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3303      	adds	r3, #3
 8001440:	60fb      	str	r3, [r7, #12]
				return tempo;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	e007      	b.n	8001456 <get_tempo+0x74>
	for(int i = 0; i<=size; i++){
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	ddce      	ble.n	80013f2 <get_tempo+0x10>
			}
		}
	}
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <print_copyright>:
	printf("Format: %u\n", convert_to_uint16((uint8_t*)&song_header->format));
	printf("Num Tracks: %u\n", convert_to_uint16((uint8_t*)&song_header->ntrks));
	printf("Divisions: %u\n", convert_to_uint16((uint8_t*)&song_header->division));
}

void print_copyright(unsigned char* song, int size){
 8001462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	//finds the copyright info in the song file and prints it
	for(int i = 0; i<=size; i++){
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e062      	b.n	800153a <print_copyright+0xd8>
		if(song[i] == (char)0xFF){
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2bff      	cmp	r3, #255	; 0xff
 800147e:	d159      	bne.n	8001534 <print_copyright+0xd2>
			i++;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
			if(song[i] == (char)0x02){
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d150      	bne.n	8001534 <print_copyright+0xd2>
 8001492:	466b      	mov	r3, sp
 8001494:	461e      	mov	r6, r3
				i++;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
				int len = (int)song[i];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	617b      	str	r3, [r7, #20]
				char copyright [len+1];
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	1e4b      	subs	r3, r1, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	460a      	mov	r2, r1
 80014b0:	2300      	movs	r3, #0
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	00eb      	lsls	r3, r5, #3
 80014c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014c4:	00e2      	lsls	r2, r4, #3
 80014c6:	460a      	mov	r2, r1
 80014c8:	2300      	movs	r3, #0
 80014ca:	4690      	mov	r8, r2
 80014cc:	4699      	mov	r9, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e2:	460b      	mov	r3, r1
 80014e4:	3307      	adds	r3, #7
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	ebad 0d03 	sub.w	sp, sp, r3
 80014ee:	466b      	mov	r3, sp
 80014f0:	3300      	adds	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
				for(int j = 0; j<=len; j++){
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	e00e      	b.n	8001518 <print_copyright+0xb6>
					copyright[j] = song[i];
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	7819      	ldrb	r1, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
					i++;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
				for(int j = 0; j<=len; j++){
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	3301      	adds	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	ddec      	ble.n	80014fa <print_copyright+0x98>
				}
				copyright[len+1]=0;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	54d1      	strb	r1, [r2, r3]
				printf("%s\n", copyright);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fac2 	bl	8001ab4 <puts>
 8001530:	46b5      	mov	sp, r6
 8001532:	e006      	b.n	8001542 <print_copyright+0xe0>
	for(int i = 0; i<=size; i++){
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3301      	adds	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	dd98      	ble.n	8001474 <print_copyright+0x12>
				return;
			}
		}
	}
}
 8001542:	3724      	adds	r7, #36	; 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800154a <print_title>:

void print_title(unsigned char* song, int size){
 800154a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	//finds the title info in the song file and prints it
	for(int i = 0; i<=size; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e065      	b.n	8001628 <print_title+0xde>
		if(song[i] == (char)0xFF){
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d15c      	bne.n	8001622 <print_title+0xd8>
			i++;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3301      	adds	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
			if(song[i] == (char)0x03){
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d153      	bne.n	8001622 <print_title+0xd8>
 800157a:	466b      	mov	r3, sp
 800157c:	461e      	mov	r6, r3
				i++;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
				int len = (int)song[i];
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	617b      	str	r3, [r7, #20]
				char title [len+1];
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	1c59      	adds	r1, r3, #1
 8001592:	1e4b      	subs	r3, r1, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	460a      	mov	r2, r1
 8001598:	2300      	movs	r3, #0
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	00eb      	lsls	r3, r5, #3
 80015a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ac:	00e2      	lsls	r2, r4, #3
 80015ae:	460a      	mov	r2, r1
 80015b0:	2300      	movs	r3, #0
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ca:	460b      	mov	r3, r1
 80015cc:	3307      	adds	r3, #7
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	ebad 0d03 	sub.w	sp, sp, r3
 80015d6:	466b      	mov	r3, sp
 80015d8:	3300      	adds	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
				i++;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
				for(int j = 0; j<=len; j++){
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e00e      	b.n	8001606 <print_title+0xbc>
					title[j] = song[i];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	7819      	ldrb	r1, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4413      	add	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
					i++;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
				for(int j = 0; j<=len; j++){
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	3301      	adds	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	429a      	cmp	r2, r3
 800160c:	ddec      	ble.n	80015e8 <print_title+0x9e>
				}
				title[len+1]=0;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	2100      	movs	r1, #0
 8001616:	54d1      	strb	r1, [r2, r3]
				printf("%s\n", title);
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fa4b 	bl	8001ab4 <puts>
 800161e:	46b5      	mov	sp, r6
 8001620:	e006      	b.n	8001630 <print_title+0xe6>
	for(int i = 0; i<=size; i++){
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	dd95      	ble.n	800155c <print_title+0x12>
				return;
			}
		}
	}
}
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001638 <print_tempo>:
void print_tempo(unsigned char* song, int size){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	//finds the tempo info in the song file and prints it
	for(int i = 0; i<=size; i++){
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e02f      	b.n	80016a8 <print_tempo+0x70>
		if(song[i] == (char)0xFF){
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d126      	bne.n	80016a2 <print_tempo+0x6a>
			i++;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
			if(song[i] == (char)0x51){
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b51      	cmp	r3, #81	; 0x51
 8001664:	d11d      	bne.n	80016a2 <print_tempo+0x6a>
				i+=2;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3302      	adds	r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
				int tempo = ((int)(song[i])*65536)+((int)(song[i+1])*256)+((int)(song[i+2]));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	3201      	adds	r2, #1
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	440a      	add	r2, r1
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	4413      	add	r3, r2
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	3202      	adds	r2, #2
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	440a      	add	r2, r1
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4413      	add	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]
				i+=3;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3303      	adds	r3, #3
 8001696:	60fb      	str	r3, [r7, #12]
				printf("%6d\n", tempo);
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <print_tempo+0x80>)
 800169c:	f000 f9d2 	bl	8001a44 <printf>
				return;
 80016a0:	e006      	b.n	80016b0 <print_tempo+0x78>
	for(int i = 0; i<=size; i++){
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	ddcb      	ble.n	8001648 <print_tempo+0x10>
			}
		}
	}
}
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0800357c 	.word	0x0800357c

080016bc <print_song_info>:


void print_song_info(int song_num){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	//prints the info for the next song
	song next_song = get_song(song_num);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fbda 	bl	8001e88 <get_song>
	print_copyright(next_song.p_song, next_song.size);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fec1 	bl	8001462 <print_copyright>
	print_title(next_song.p_song, next_song.size);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff2f 	bl	800154a <print_title>
	print_tempo(next_song.p_song, next_song.size);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffa0 	bl	8001638 <print_tempo>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <get_count_start>:

struct midiEvent* notes[450];
static int num_events = 0;
static int count_start = 0;

int get_count_start(){
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return count_start;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <get_count_start+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000847c 	.word	0x2000847c

08001718 <parseDelay>:

uint32_t parseDelay(uint8_t* delay) {
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
    uint8_t byte;

    do {
        byte = *(delay++);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	72fb      	strb	r3, [r7, #11]
        value = (value << 7) | (byte & 0x7F);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	01da      	lsls	r2, r3, #7
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001738:	4313      	orrs	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
    } while (byte & 0x80);
 800173c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dbef      	blt.n	8001724 <parseDelay+0xc>

    return value;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <get_track_start>:

int get_track_start(unsigned char* p_song, int size){
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	int track_index = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<size;i++){
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	e020      	b.n	80017a8 <get_track_start+0x56>
		//printf("%ld\n", get_counter());
		if (p_song[i] == 0x4d && p_song[i+1] == 0x54 && p_song[i+2] == 0x72 && p_song[i+3] == 0x6b){
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b4d      	cmp	r3, #77	; 0x4d
 8001770:	d117      	bne.n	80017a2 <get_track_start+0x50>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b54      	cmp	r3, #84	; 0x54
 800177e:	d110      	bne.n	80017a2 <get_track_start+0x50>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3302      	adds	r3, #2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b72      	cmp	r3, #114	; 0x72
 800178c:	d109      	bne.n	80017a2 <get_track_start+0x50>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3303      	adds	r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b6b      	cmp	r3, #107	; 0x6b
 800179a:	d102      	bne.n	80017a2 <get_track_start+0x50>
			track_index = i+8;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3308      	adds	r3, #8
 80017a0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<size;i++){
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbda      	blt.n	8001766 <get_track_start+0x14>
		}
	}
	//printf("%ld\n", track_index);
	//printf("track index found\n");
	return track_index;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <parse_song>:

void parse_song(unsigned char* p_song, int track_start, int size){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	int i = track_start;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t delay_buffer[10];
	while(i<size){
 80017d0:	e088      	b.n	80018e4 <parse_song+0x124>
		int delay_index = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
		struct midiEvent* curr = malloc(sizeof(struct midiEvent));
 80017d6:	2008      	movs	r0, #8
 80017d8:	f001 f9d2 	bl	8002b80 <malloc>
 80017dc:	4603      	mov	r3, r0
 80017de:	623b      	str	r3, [r7, #32]
		while(p_song[i] & 0x80){
 80017e0:	e00f      	b.n	8001802 <parse_song+0x42>
			delay_buffer[delay_index] = p_song[i];
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	f107 0214 	add.w	r2, r7, #20
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	4413      	add	r3, r2
 80017f2:	460a      	mov	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
			delay_index++;
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	3301      	adds	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
			i++;
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	3301      	adds	r3, #1
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(p_song[i] & 0x80){
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	dbe8      	blt.n	80017e2 <parse_song+0x22>
		}
		delay_buffer[delay_index] = p_song[i];
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	7819      	ldrb	r1, [r3, #0]
 8001818:	f107 0214 	add.w	r2, r7, #20
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
		i++;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	3301      	adds	r3, #1
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
		if((p_song[i] & 0xF0) == 0x90){
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001836:	2b90      	cmp	r3, #144	; 0x90
 8001838:	d12a      	bne.n	8001890 <parse_song+0xd0>
			curr->delay = parseDelay(delay_buffer);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff6a 	bl	8001718 <parseDelay>
 8001844:	4602      	mov	r2, r0
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	601a      	str	r2, [r3, #0]
			curr->type = p_song[i];
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	711a      	strb	r2, [r3, #4]
			curr->key = p_song[i+1];
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	715a      	strb	r2, [r3, #5]
			curr->velocity = p_song[i+2];
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3302      	adds	r3, #2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	719a      	strb	r2, [r3, #6]
			i+=3;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	3303      	adds	r3, #3
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
			notes[num_events] = curr;
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <parse_song+0x15c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4928      	ldr	r1, [pc, #160]	; (8001920 <parse_song+0x160>)
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			num_events++;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <parse_song+0x15c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a24      	ldr	r2, [pc, #144]	; (800191c <parse_song+0x15c>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e029      	b.n	80018e4 <parse_song+0x124>
		} else if((p_song[i] & 0xF0) == 0x80){
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d121      	bne.n	80018e4 <parse_song+0x124>
			curr->delay = parseDelay(delay_buffer);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff37 	bl	8001718 <parseDelay>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	601a      	str	r2, [r3, #0]
			curr->type = p_song[i];
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	711a      	strb	r2, [r3, #4]
			curr->key = 0;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2200      	movs	r2, #0
 80018c0:	715a      	strb	r2, [r3, #5]
			curr->velocity = 0;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2200      	movs	r2, #0
 80018c6:	719a      	strb	r2, [r3, #6]
			i+=2;
 80018c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ca:	3302      	adds	r3, #2
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
			notes[num_events] = curr;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <parse_song+0x15c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4913      	ldr	r1, [pc, #76]	; (8001920 <parse_song+0x160>)
 80018d4:	6a3a      	ldr	r2, [r7, #32]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			num_events++;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <parse_song+0x15c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <parse_song+0x15c>)
 80018e2:	6013      	str	r3, [r2, #0]
	while(i<size){
 80018e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f6ff af72 	blt.w	80017d2 <parse_song+0x12>
		}
	}
	for(int j = 0; j<num_events; j++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
 80018f2:	e009      	b.n	8001908 <parse_song+0x148>
		free(notes[j]);
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <parse_song+0x160>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f947 	bl	8002b90 <free>
	for(int j = 0; j<num_events; j++){
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <parse_song+0x15c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf0      	blt.n	80018f4 <parse_song+0x134>
	}
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20008478 	.word	0x20008478
 8001920:	20007d70 	.word	0x20007d70

08001924 <play_song>:

void play_song(){
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08b      	sub	sp, #44	; 0x2c
 8001928:	af00      	add	r7, sp, #0
	struct header* song_header = get_header();
 800192a:	f7ff fd45 	bl	80013b8 <get_header>
 800192e:	61f8      	str	r0, [r7, #28]
	int miditicks = get_tempo(get_song(get_song_num()).p_song, get_song(get_song_num()).size) / (convert_to_uint16((uint8_t *)&song_header->division));
 8001930:	f000 f942 	bl	8001bb8 <get_song_num>
 8001934:	4603      	mov	r3, r0
 8001936:	b2da      	uxtb	r2, r3
 8001938:	463b      	mov	r3, r7
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 faa3 	bl	8001e88 <get_song>
 8001942:	683c      	ldr	r4, [r7, #0]
 8001944:	f000 f938 	bl	8001bb8 <get_song_num>
 8001948:	4603      	mov	r3, r0
 800194a:	b2da      	uxtb	r2, r3
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fa98 	bl	8001e88 <get_song>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4619      	mov	r1, r3
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fd40 	bl	80013e2 <get_tempo>
 8001962:	4604      	mov	r4, r0
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	330c      	adds	r3, #12
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fcd9 	bl	8001320 <convert_to_uint16>
 800196e:	4603      	mov	r3, r0
 8001970:	fb94 f3f3 	sdiv	r3, r4, r3
 8001974:	61bb      	str	r3, [r7, #24]
	int song_delay = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
	count_start = get_count();
 800197a:	f000 fabd 	bl	8001ef8 <get_count>
 800197e:	4603      	mov	r3, r0
 8001980:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <play_song+0x110>)
 8001982:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num_events; i++){
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	e047      	b.n	8001a1a <play_song+0xf6>
		if((notes[i]->type & 0xF0) == 0x90){
 800198a:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <play_song+0x114>)
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001998:	2b90      	cmp	r3, #144	; 0x90
 800199a:	d11f      	bne.n	80019dc <play_song+0xb8>
			int delay = (notes[i+1]->delay)*miditicks;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <play_song+0x114>)
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	613b      	str	r3, [r7, #16]
			song_delay += delay;
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4413      	add	r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
			add_tone(notes[i]->key, notes[i]->velocity);
 80019b8:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <play_song+0x114>)
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	795a      	ldrb	r2, [r3, #5]
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <play_song+0x114>)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ca:	799b      	ldrb	r3, [r3, #6]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 fae0 	bl	8001f94 <add_tone>
			//printf("tone added");
			play_tones(song_delay);
 80019d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019d6:	f000 fb1f 	bl	8002018 <play_tones>
 80019da:	e018      	b.n	8001a0e <play_song+0xea>
		} else{
			int delay = (notes[i+1]->delay)*miditicks;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <play_song+0x114>)
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
			song_delay += delay;
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
			remove_tone(notes[i]->key);
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <play_song+0x114>)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	795b      	ldrb	r3, [r3, #5]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 faea 	bl	8001fdc <remove_tone>
			//printf("tone removed");
			play_tones(song_delay);
 8001a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a0a:	f000 fb05 	bl	8002018 <play_tones>
		}
		printf("played tone");
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <play_song+0x118>)
 8001a10:	f000 f818 	bl	8001a44 <printf>
	for(int i = 0; i < num_events; i++){
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	3301      	adds	r3, #1
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <play_song+0x11c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbb2      	blt.n	800198a <play_song+0x66>
	}
	num_events = 0;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <play_song+0x11c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	372c      	adds	r7, #44	; 0x2c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000847c 	.word	0x2000847c
 8001a38:	20007d70 	.word	0x20007d70
 8001a3c:	08003584 	.word	0x08003584
 8001a40:	20008478 	.word	0x20008478

08001a44 <printf>:
#include "printf.h"
#include "UART.h"

char buffer[80];

int printf(const char *format, ...) {
 8001a44:	b40f      	push	{r0, r1, r2, r3}
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
	//formatted printer
	va_list aptr;
	int ret;
	va_start(aptr, format);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	603b      	str	r3, [r7, #0]
	ret = vsprintf(buffer, format, aptr);
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	4815      	ldr	r0, [pc, #84]	; (8001aac <printf+0x68>)
 8001a58:	f001 f984 	bl	8002d64 <vsiprintf>
 8001a5c:	6078      	str	r0, [r7, #4]
	va_end(aptr);
	if (buffer[ret-1] == '\n'){
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <printf+0x68>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d111      	bne.n	8001a8e <printf+0x4a>
		buffer[ret-1] = '\r';
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <printf+0x68>)
 8001a70:	210d      	movs	r1, #13
 8001a72:	54d1      	strb	r1, [r2, r3]
		buffer[ret] = '\n';
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <printf+0x68>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	701a      	strb	r2, [r3, #0]
		buffer[ret+1] = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <printf+0x68>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	54d1      	strb	r1, [r2, r3]
		ret++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
	}
	USART_Write(USART2, (uint8_t*)buffer, ret);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4906      	ldr	r1, [pc, #24]	; (8001aac <printf+0x68>)
 8001a94:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <printf+0x6c>)
 8001a96:	f7ff fa26 	bl	8000ee6 <USART_Write>
	return ret;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001aa6:	b004      	add	sp, #16
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20008480 	.word	0x20008480
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <puts>:
	USART_Write(USART2, (unsigned char*)buffer, ret);
	USART_Write(USART2, (unsigned char*)"\r\n", 2);
	return ret;
}

int puts(const char *str){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	//Prints a string with a new line after
	int ret = sprintf(buffer, "%s\r\n", str);
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <puts+0x2c>)
 8001ac0:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <puts+0x30>)
 8001ac2:	f001 f919 	bl	8002cf8 <siprintf>
 8001ac6:	60f8      	str	r0, [r7, #12]
	USART_Write(USART2, (uint8_t*) buffer, ret);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4905      	ldr	r1, [pc, #20]	; (8001ae4 <puts+0x30>)
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <puts+0x34>)
 8001ad0:	f7ff fa09 	bl	8000ee6 <USART_Write>
	return ret;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	08003598 	.word	0x08003598
 8001ae4:	20008480 	.word	0x20008480
 8001ae8:	40004400 	.word	0x40004400

08001aec <putchar>:

int putchar(int c){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	//prints a char
	USART_Write(USART2, (uint8_t*) &c, 1);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2201      	movs	r2, #1
 8001af8:	4619      	mov	r1, r3
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <putchar+0x20>)
 8001afc:	f7ff f9f3 	bl	8000ee6 <USART_Write>
	return c;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40004400 	.word	0x40004400

08001b10 <print_help>:
static char input_buffer[80];
static int buffer_ind = 0;
static int remote_state = 1;

//Prints message to tell users which mode they are in
void print_help(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	if(remote_state==1){
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <print_help+0x3c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d112      	bne.n	8001b42 <print_help+0x32>
		//Prints help message for Remote mode
		printf("\n***REMOTE LED CONTROL MENU***\n");
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <print_help+0x40>)
 8001b1e:	f7ff ffc9 	bl	8001ab4 <puts>
		printf("Available User Commands\n");
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <print_help+0x44>)
 8001b24:	f7ff ffc6 	bl	8001ab4 <puts>
		printf("NEXT - Show next song info\n");
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <print_help+0x48>)
 8001b2a:	f7ff ffc3 	bl	8001ab4 <puts>
		printf("PLAY - Play the song (LED on)\n");
 8001b2e:	480b      	ldr	r0, [pc, #44]	; (8001b5c <print_help+0x4c>)
 8001b30:	f7ff ffc0 	bl	8001ab4 <puts>
		printf("PAUSE - Pause the song (LED flash)\n");
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <print_help+0x50>)
 8001b36:	f7ff ffbd 	bl	8001ab4 <puts>
		printf("STOP - Stop the song (LED off)\n");
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <print_help+0x54>)
 8001b3c:	f7ff ffba 	bl	8001ab4 <puts>
	} else{
		//Prints message for Local mode
		printf("***MANUAL OVERRIDE MODE ACTIVE***\n");
	}
}
 8001b40:	e002      	b.n	8001b48 <print_help+0x38>
		printf("***MANUAL OVERRIDE MODE ACTIVE***\n");
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <print_help+0x58>)
 8001b44:	f7ff ffb6 	bl	8001ab4 <puts>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	080035a0 	.word	0x080035a0
 8001b54:	080035c0 	.word	0x080035c0
 8001b58:	080035d8 	.word	0x080035d8
 8001b5c:	080035f4 	.word	0x080035f4
 8001b60:	08003614 	.word	0x08003614
 8001b64:	08003638 	.word	0x08003638
 8001b68:	08003658 	.word	0x08003658

08001b6c <toggle_mode>:

//Method to call when blue button is pressed to toggle between modes
void toggle_mode(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	if(remote_state==1){
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <toggle_mode+0x48>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10d      	bne.n	8001b94 <toggle_mode+0x28>
		//disables USART and enables S1 switch interrupts for Local mode
		remote_state--;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <toggle_mode+0x48>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <toggle_mode+0x48>)
 8001b80:	6013      	str	r3, [r2, #0]
		print_help();
 8001b82:	f7ff ffc5 	bl	8001b10 <print_help>
		S1_button_enable();
 8001b86:	f7ff facd 	bl	8001124 <S1_button_enable>
		set_manual_active();
 8001b8a:	f7ff faf3 	bl	8001174 <set_manual_active>
		disable_USART();
 8001b8e:	f7ff fb9f 	bl	80012d0 <disable_USART>
		enable_USART();
		S1_button_disable();
		set_manual_unactive();
		print_help();
	}
}
 8001b92:	e00c      	b.n	8001bae <toggle_mode+0x42>
		remote_state++;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <toggle_mode+0x48>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <toggle_mode+0x48>)
 8001b9c:	6013      	str	r3, [r2, #0]
		enable_USART();
 8001b9e:	f7ff fb9e 	bl	80012de <enable_USART>
		S1_button_disable();
 8001ba2:	f7ff fac6 	bl	8001132 <S1_button_disable>
		set_manual_unactive();
 8001ba6:	f7ff faf1 	bl	800118c <set_manual_unactive>
		print_help();
 8001baa:	f7ff ffb1 	bl	8001b10 <print_help>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <get_song_num>:
	return remote_state;
}

//getter for song number
//output - song_num
int get_song_num(){
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return song_num;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <get_song_num+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <next_song>:

//increments the song number correctly then prints the info for the next song
void next_song(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	if(song_num >= 4){
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <next_song+0x2c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	dd03      	ble.n	8001be4 <next_song+0x14>
		song_num = 0;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <next_song+0x2c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e004      	b.n	8001bee <next_song+0x1e>
	} else{
		song_num++;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <next_song+0x2c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <next_song+0x2c>)
 8001bec:	6013      	str	r3, [r2, #0]
	}
	print_song_info(song_num);
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <next_song+0x2c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fd62 	bl	80016bc <print_song_info>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000004 	.word	0x20000004

08001c00 <LED_Controller>:

//Calls the correct LED function
void LED_Controller(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if(LED_status == 0){
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <LED_Controller+0x38>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <LED_Controller+0x14>
		LED_Off(LED_PIN);
 8001c0c:	2007      	movs	r0, #7
 8001c0e:	f7ff f838 	bl	8000c82 <LED_Off>
	} else if(LED_status == 1){
		LED_Toggle(LED_PIN);
	} else if(LED_status == 2){
		LED_On(LED_PIN);
	}
}
 8001c12:	e00e      	b.n	8001c32 <LED_Controller+0x32>
	} else if(LED_status == 1){
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <LED_Controller+0x38>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d103      	bne.n	8001c24 <LED_Controller+0x24>
		LED_Toggle(LED_PIN);
 8001c1c:	2007      	movs	r0, #7
 8001c1e:	f7ff f846 	bl	8000cae <LED_Toggle>
}
 8001c22:	e006      	b.n	8001c32 <LED_Controller+0x32>
	} else if(LED_status == 2){
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <LED_Controller+0x38>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d102      	bne.n	8001c32 <LED_Controller+0x32>
		LED_On(LED_PIN);
 8001c2c:	2007      	movs	r0, #7
 8001c2e:	f7ff f813 	bl	8000c58 <LED_On>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000

08001c3c <Toggle_LED_status>:

//method to toggle between play and pause for S1 switch
void Toggle_LED_status(){
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af00      	add	r7, sp, #0
	if(LED_status == 2){
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <Toggle_LED_status+0x8c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d103      	bne.n	8001c52 <Toggle_LED_status+0x16>
		LED_status = 1;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <Toggle_LED_status+0x8c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
		LED_status = 2;
		int track_start = get_track_start(get_song(song_num).p_song, get_song(song_num).size);
		parse_song(get_song(song_num).p_song, track_start, get_song(song_num).size);
		play_song();
	}
}
 8001c50:	e035      	b.n	8001cbe <Toggle_LED_status+0x82>
		LED_status = 2;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <Toggle_LED_status+0x8c>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
		int track_start = get_track_start(get_song(song_num).p_song, get_song(song_num).size);
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <Toggle_LED_status+0x90>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f910 	bl	8001e88 <get_song>
 8001c68:	687c      	ldr	r4, [r7, #4]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <Toggle_LED_status+0x90>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f906 	bl	8001e88 <get_song>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fd66 	bl	8001752 <get_track_start>
 8001c86:	6278      	str	r0, [r7, #36]	; 0x24
		parse_song(get_song(song_num).p_song, track_start, get_song(song_num).size);
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <Toggle_LED_status+0x90>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f8f7 	bl	8001e88 <get_song>
 8001c9a:	697c      	ldr	r4, [r7, #20]
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <Toggle_LED_status+0x90>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f8ed 	bl	8001e88 <get_song>
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fd83 	bl	80017c0 <parse_song>
		play_song();
 8001cba:	f7ff fe33 	bl	8001924 <play_song>
}
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <Set_LED_status>:

//setter method for LED_status
//status: new status for LED, can only be 0, 1, or 2
void Set_LED_status(int status){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	LED_status = status;
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <Set_LED_status+0x1c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <fill_buffer>:

//gets called every time USART interrupts
//input - the byte USART reads
void fill_buffer(char input){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	input_buffer[buffer_ind] = input;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <fill_buffer+0x2c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <fill_buffer+0x30>)
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	54ca      	strb	r2, [r1, r3]
	buffer_ind += 1;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <fill_buffer+0x2c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <fill_buffer+0x2c>)
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20008520 	.word	0x20008520
 8001d20:	200084d0 	.word	0x200084d0

08001d24 <read_input>:
//polls until new line is pressed then reads the buffer. Recursively calls itself to keep polling
void read_input(){
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
	while(input_buffer[buffer_ind-1] != '\r'){
 8001d2a:	e006      	b.n	8001d3a <read_input+0x16>
		if(remote_state == 0){
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <read_input+0x134>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <read_input+0x16>
			manual_mode_loop();
 8001d34:	f7ff fa36 	bl	80011a4 <manual_mode_loop>
			return;
 8001d38:	e08a      	b.n	8001e50 <read_input+0x12c>
	while(input_buffer[buffer_ind-1] != '\r'){
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <read_input+0x138>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <read_input+0x13c>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	2b0d      	cmp	r3, #13
 8001d46:	d1f1      	bne.n	8001d2c <read_input+0x8>
		}
	}
	//printf("\nread new line");
	if (strcmp("NEXT\r", input_buffer) == 0){
 8001d48:	4945      	ldr	r1, [pc, #276]	; (8001e60 <read_input+0x13c>)
 8001d4a:	4846      	ldr	r0, [pc, #280]	; (8001e64 <read_input+0x140>)
 8001d4c:	f7fe fa40 	bl	80001d0 <strcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <read_input+0x38>
		next_song();
 8001d56:	f7ff ff3b 	bl	8001bd0 <next_song>
 8001d5a:	e068      	b.n	8001e2e <read_input+0x10a>
	} else if (strcmp("PLAY\r", input_buffer) == 0){
 8001d5c:	4940      	ldr	r1, [pc, #256]	; (8001e60 <read_input+0x13c>)
 8001d5e:	4842      	ldr	r0, [pc, #264]	; (8001e68 <read_input+0x144>)
 8001d60:	f7fe fa36 	bl	80001d0 <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13e      	bne.n	8001de8 <read_input+0xc4>
		if(song_num>4){
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <read_input+0x148>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	dd03      	ble.n	8001d7a <read_input+0x56>
			printf("Use NEXT command to get to first song.");
 8001d72:	483f      	ldr	r0, [pc, #252]	; (8001e70 <read_input+0x14c>)
 8001d74:	f7ff fe66 	bl	8001a44 <printf>
 8001d78:	e059      	b.n	8001e2e <read_input+0x10a>
		}else{
			LED_status = 2;
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <read_input+0x150>)
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	601a      	str	r2, [r3, #0]
			int track_start = get_track_start(get_song(song_num).p_song, get_song(song_num).size);
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <read_input+0x148>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f87c 	bl	8001e88 <get_song>
 8001d90:	687c      	ldr	r4, [r7, #4]
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <read_input+0x148>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f872 	bl	8001e88 <get_song>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fcd2 	bl	8001752 <get_track_start>
 8001dae:	6278      	str	r0, [r7, #36]	; 0x24
			parse_song(get_song(song_num).p_song, track_start, get_song(song_num).size);
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <read_input+0x148>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f863 	bl	8001e88 <get_song>
 8001dc2:	697c      	ldr	r4, [r7, #20]
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <read_input+0x148>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f859 	bl	8001e88 <get_song>
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff fcef 	bl	80017c0 <parse_song>
			play_song();
 8001de2:	f7ff fd9f 	bl	8001924 <play_song>
 8001de6:	e022      	b.n	8001e2e <read_input+0x10a>
		}
	} else if (strcmp("PAUSE\r", input_buffer) == 0){
 8001de8:	491d      	ldr	r1, [pc, #116]	; (8001e60 <read_input+0x13c>)
 8001dea:	4823      	ldr	r0, [pc, #140]	; (8001e78 <read_input+0x154>)
 8001dec:	f7fe f9f0 	bl	80001d0 <strcmp>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <read_input+0xda>
		Set_LED_status(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff ff6a 	bl	8001cd0 <Set_LED_status>
 8001dfc:	e017      	b.n	8001e2e <read_input+0x10a>
	} else if (strcmp("STOP\r", input_buffer) == 0){
 8001dfe:	4918      	ldr	r1, [pc, #96]	; (8001e60 <read_input+0x13c>)
 8001e00:	481e      	ldr	r0, [pc, #120]	; (8001e7c <read_input+0x158>)
 8001e02:	f7fe f9e5 	bl	80001d0 <strcmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <read_input+0xf0>
		Set_LED_status(0);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ff5f 	bl	8001cd0 <Set_LED_status>
 8001e12:	e00c      	b.n	8001e2e <read_input+0x10a>
	} else if (strcmp("HELP\r", input_buffer) == 0){
 8001e14:	4912      	ldr	r1, [pc, #72]	; (8001e60 <read_input+0x13c>)
 8001e16:	481a      	ldr	r0, [pc, #104]	; (8001e80 <read_input+0x15c>)
 8001e18:	f7fe f9da 	bl	80001d0 <strcmp>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <read_input+0x104>
		print_help();
 8001e22:	f7ff fe75 	bl	8001b10 <print_help>
 8001e26:	e002      	b.n	8001e2e <read_input+0x10a>
	} else{
		printf("Invalid Command");
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <read_input+0x160>)
 8001e2a:	f7ff fe0b 	bl	8001a44 <printf>
	}
	printf("\n");
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f7ff fe5c 	bl	8001aec <putchar>
	memset(input_buffer, 0, strlen(input_buffer));
 8001e34:	480a      	ldr	r0, [pc, #40]	; (8001e60 <read_input+0x13c>)
 8001e36:	f7fe f9d5 	bl	80001e4 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4807      	ldr	r0, [pc, #28]	; (8001e60 <read_input+0x13c>)
 8001e42:	f000 ff99 	bl	8002d78 <memset>
	buffer_ind = 0;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <read_input+0x138>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
	read_input();
 8001e4c:	f7ff ff6a 	bl	8001d24 <read_input>
}
 8001e50:	372c      	adds	r7, #44	; 0x2c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20008520 	.word	0x20008520
 8001e60:	200084d0 	.word	0x200084d0
 8001e64:	0800367c 	.word	0x0800367c
 8001e68:	08003684 	.word	0x08003684
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	0800368c 	.word	0x0800368c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	080036b4 	.word	0x080036b4
 8001e7c:	080036bc 	.word	0x080036bc
 8001e80:	080036c4 	.word	0x080036c4
 8001e84:	080036cc 	.word	0x080036cc

08001e88 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8001e88:	b490      	push	{r4, r7}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <get_song+0x2c>)
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea4:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc90      	pop	{r4, r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20007ab0 	.word	0x20007ab0

08001eb8 <SysTick_Handler>:
#include "tone.h"


static int count = 0;

void SysTick_Handler(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	//Handler for systick interrupts. Is essentially the main loop of the project
	//add_song_counter();
	count++;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <SysTick_Handler+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Handler+0x34>)
 8001ec4:	6013      	str	r3, [r2, #0]
	if(count%1000000 == 0){
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <SysTick_Handler+0x34>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <SysTick_Handler+0x38>)
 8001ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ed0:	1499      	asrs	r1, r3, #18
 8001ed2:	17d3      	asrs	r3, r2, #31
 8001ed4:	1acb      	subs	r3, r1, r3
 8001ed6:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <SysTick_Handler+0x3c>)
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <SysTick_Handler+0x2e>
		//Controls LED
		LED_Controller();
 8001ee2:	f7ff fe8d 	bl	8001c00 <LED_Controller>
//	if(Get_button_pressed()>0){
//		//If S1 switch has been pressed it will increment a counter for a second
//		increment_count();
//	}
	//printf("interrupted");
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20008524 	.word	0x20008524
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	000f4240 	.word	0x000f4240

08001ef8 <get_count>:

int get_count(){
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	return count;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <get_count+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20008524 	.word	0x20008524

08001f10 <hertz_to_midi_ticks>:

uint32_t get_tick_speed ();


// Convert from hertz to ticks
uint32_t hertz_to_midi_ticks (float hertz) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	ed87 0a01 	vstr	s0, [r7, #4]
	float ticks_per_second = CPU_SPEED / (SysTick->LOAD + 1);
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <hertz_to_midi_ticks+0x80>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe faff 	bl	8000524 <__aeabi_ui2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	a117      	add	r1, pc, #92	; (adr r1, 8001f88 <hertz_to_midi_ticks+0x78>)
 8001f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f30:	f7fe fc9c 	bl	800086c <__aeabi_ddiv>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fd7e 	bl	8000a3c <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8001f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	d101      	bne.n	8001f56 <hertz_to_midi_ticks+0x46>
		return 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e011      	b.n	8001f7a <hertz_to_midi_ticks+0x6a>
	float duration = 1 / hertz;
 8001f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f62:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * ticks_per_second);
 8001f66:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 3a90 	vmov	r3, s15
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	419312d0 	.word	0x419312d0
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <add_tone>:
void reset_counter () {
	counter = 0;
}

// Add a tone to the tones array
uint8_t add_tone (uint8_t note, uint8_t velocity) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71bb      	strb	r3, [r7, #6]
	tones [0] = (tone_info){hertz_to_midi_ticks (notes [note]), velocity};
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <add_tone+0x40>)
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb4:	f7ff ffac 	bl	8001f10 <hertz_to_midi_ticks>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	79ba      	ldrb	r2, [r7, #6]
 8001fbc:	b291      	uxth	r1, r2
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <add_tone+0x44>)
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <add_tone+0x44>)
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	809a      	strh	r2, [r3, #4]
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20007ad8 	.word	0x20007ad8
 8001fd8:	20008528 	.word	0x20008528

08001fdc <remove_tone>:

// Remove a tone from the tones array
uint8_t remove_tone (uint8_t note) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	tones [0].duration = hertz_to_midi_ticks (notes [note]);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <remove_tone+0x34>)
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f7ff ff8b 	bl	8001f10 <hertz_to_midi_ticks>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <remove_tone+0x38>)
 8001ffe:	6013      	str	r3, [r2, #0]
	tones [0].power = 0;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <remove_tone+0x38>)
 8002002:	2200      	movs	r2, #0
 8002004:	809a      	strh	r2, [r3, #4]
	return 0;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20007ad8 	.word	0x20007ad8
 8002014:	20008528 	.word	0x20008528

08002018 <play_tones>:

// Play any tones in the array
void play_tones (int delay) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	DAC_Init();
 8002020:	f7fe fff2 	bl	8001008 <DAC_Init>
	DAC_Start();
 8002024:	f7ff f822 	bl	800106c <DAC_Start>
	//printf("%ld\n", (get_count() - get_count_start()));
	//printf("%ld\n", (get_count()));
	//printf("%ld\n", delay);
	while(((get_count() - get_count_start()) < delay) && ((get_count() - get_count_start())*20 > delay)){
 8002028:	e023      	b.n	8002072 <play_tones+0x5a>
		//printf("%ld", (get_count() - get_count_start()));
		if(((get_count() - get_count_start()) % tones[0].duration) < (tones[0].duration>>1)){
 800202a:	f7ff ff65 	bl	8001ef8 <get_count>
 800202e:	4604      	mov	r4, r0
 8002030:	f7ff fb66 	bl	8001700 <get_count_start>
 8002034:	4603      	mov	r3, r0
 8002036:	1ae3      	subs	r3, r4, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <play_tones+0x94>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fbb2 f1f3 	udiv	r1, r2, r3
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	1ad2      	subs	r2, r2, r3
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <play_tones+0x94>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	429a      	cmp	r2, r3
 8002050:	d20a      	bcs.n	8002068 <play_tones+0x50>
			DAC_Set_Value(tones[0].power*30);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <play_tones+0x94>)
 8002054:	889b      	ldrh	r3, [r3, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	4613      	mov	r3, r2
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f80d 	bl	8001080 <DAC_Set_Value>
 8002066:	e004      	b.n	8002072 <play_tones+0x5a>
		} else{
			DAC_Set_Value(tones[0].power);
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <play_tones+0x94>)
 800206a:	889b      	ldrh	r3, [r3, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f807 	bl	8001080 <DAC_Set_Value>
	while(((get_count() - get_count_start()) < delay) && ((get_count() - get_count_start())*20 > delay)){
 8002072:	f7ff ff41 	bl	8001ef8 <get_count>
 8002076:	4604      	mov	r4, r0
 8002078:	f7ff fb42 	bl	8001700 <get_count_start>
 800207c:	4603      	mov	r3, r0
 800207e:	1ae3      	subs	r3, r4, r3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dd0e      	ble.n	80020a4 <play_tones+0x8c>
 8002086:	f7ff ff37 	bl	8001ef8 <get_count>
 800208a:	4604      	mov	r4, r0
 800208c:	f7ff fb38 	bl	8001700 <get_count_start>
 8002090:	4603      	mov	r3, r0
 8002092:	1ae2      	subs	r2, r4, r3
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4293      	cmp	r3, r2
 80020a2:	dbc2      	blt.n	800202a <play_tones+0x12>
		}
	}
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20008528 	.word	0x20008528

080020b0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80020b6:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <System_Clock_Init+0x1b4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <System_Clock_Init+0x1b4>)
 80020bc:	f023 0307 	bic.w	r3, r3, #7
 80020c0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <System_Clock_Init+0x1b4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a67      	ldr	r2, [pc, #412]	; (8002264 <System_Clock_Init+0x1b4>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80020ce:	4b66      	ldr	r3, [pc, #408]	; (8002268 <System_Clock_Init+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a65      	ldr	r2, [pc, #404]	; (8002268 <System_Clock_Init+0x1b8>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80020da:	bf00      	nop
 80020dc:	4b62      	ldr	r3, [pc, #392]	; (8002268 <System_Clock_Init+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f9      	beq.n	80020dc <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80020e8:	2310      	movs	r3, #16
 80020ea:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80020ec:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <System_Clock_Init+0x1b8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <System_Clock_Init+0x1b8>)
 80020f2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80020f6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <System_Clock_Init+0x1b8>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4959      	ldr	r1, [pc, #356]	; (8002268 <System_Clock_Init+0x1b8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8002106:	4b58      	ldr	r3, [pc, #352]	; (8002268 <System_Clock_Init+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a57      	ldr	r2, [pc, #348]	; (8002268 <System_Clock_Init+0x1b8>)
 800210c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002110:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8002112:	bf00      	nop
 8002114:	4b54      	ldr	r3, [pc, #336]	; (8002268 <System_Clock_Init+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002120:	d0f8      	beq.n	8002114 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <System_Clock_Init+0x1b8>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a50      	ldr	r2, [pc, #320]	; (8002268 <System_Clock_Init+0x1b8>)
 8002128:	f023 0303 	bic.w	r3, r3, #3
 800212c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800212e:	4b4e      	ldr	r3, [pc, #312]	; (8002268 <System_Clock_Init+0x1b8>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <System_Clock_Init+0x1b8>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <System_Clock_Init+0x1b8>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002142:	4a49      	ldr	r2, [pc, #292]	; (8002268 <System_Clock_Init+0x1b8>)
 8002144:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002148:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <System_Clock_Init+0x1b8>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	4a45      	ldr	r2, [pc, #276]	; (8002268 <System_Clock_Init+0x1b8>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <System_Clock_Init+0x1b8>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a42      	ldr	r2, [pc, #264]	; (8002268 <System_Clock_Init+0x1b8>)
 8002160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002164:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8002166:	4b40      	ldr	r3, [pc, #256]	; (8002268 <System_Clock_Init+0x1b8>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <System_Clock_Init+0x1b8>)
 800216c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002170:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <System_Clock_Init+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3c      	ldr	r2, [pc, #240]	; (8002268 <System_Clock_Init+0x1b8>)
 8002178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800217e:	bf00      	nop
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <System_Clock_Init+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f9      	beq.n	8002180 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <System_Clock_Init+0x1b8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <System_Clock_Init+0x1b8>)
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <System_Clock_Init+0x1b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a32      	ldr	r2, [pc, #200]	; (8002268 <System_Clock_Init+0x1b8>)
 800219e:	f043 0303 	orr.w	r3, r3, #3
 80021a2:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80021a4:	bf00      	nop
 80021a6:	4b30      	ldr	r3, [pc, #192]	; (8002268 <System_Clock_Init+0x1b8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d1f9      	bne.n	80021a6 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <System_Clock_Init+0x1b8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <System_Clock_Init+0x1b8>)
 80021b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <System_Clock_Init+0x1b8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <System_Clock_Init+0x1b8>)
 80021c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <System_Clock_Init+0x1b8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <System_Clock_Init+0x1b8>)
 80021d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021d4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <System_Clock_Init+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <System_Clock_Init+0x1b8>)
 80021dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021e0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80021e2:	bf00      	nop
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <System_Clock_Init+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f0:	d0f8      	beq.n	80021e4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <System_Clock_Init+0x1b8>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <System_Clock_Init+0x1b8>)
 80021f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021fc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <System_Clock_Init+0x1b8>)
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <System_Clock_Init+0x1b8>)
 8002204:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8002208:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <System_Clock_Init+0x1b8>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <System_Clock_Init+0x1b8>)
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <System_Clock_Init+0x1b8>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <System_Clock_Init+0x1b8>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <System_Clock_Init+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <System_Clock_Init+0x1b8>)
 8002228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800222c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800222e:	bf00      	nop
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <System_Clock_Init+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f9      	beq.n	8002230 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <System_Clock_Init+0x1b8>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <System_Clock_Init+0x1b8>)
 8002244:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <System_Clock_Init+0x1b8>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <System_Clock_Init+0x1b8>)
 8002252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002256:	6613      	str	r3, [r2, #96]	; 0x60
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000

0800226c <Error_Handler>:

/**
 * Error handler that is called by lower level functions. 
 * Add an implementation if desired.
*/
void Error_Handler () {
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f000 fd7c 	bl	8002da8 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20018000 	.word	0x20018000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20008530 	.word	0x20008530
 80022e4:	20008680 	.word	0x20008680

080022e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <SystemInit+0x64>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <SystemInit+0x64>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <SystemInit+0x68>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <SystemInit+0x68>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <SystemInit+0x68>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <SystemInit+0x68>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <SystemInit+0x68>)
 8002314:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002318:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800231c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <SystemInit+0x68>)
 8002320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002324:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <SystemInit+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <SystemInit+0x68>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <SystemInit+0x68>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <SystemInit+0x64>)
 800233a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233e:	609a      	str	r2, [r3, #8]
#endif
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00
 8002350:	40021000 	.word	0x40021000

08002354 <init_systick>:
};

static struct sys_tick* SysTick = (struct sys_tick*) 0xE000E010;
// This function is to Initialize SysTick registers
void init_systick()
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CSR = 0;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <init_systick+0x50>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
	SysTick->RVR = 79;
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <init_systick+0x50>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	224f      	movs	r2, #79	; 0x4f
 8002366:	605a      	str	r2, [r3, #4]
	SysTick->CSR |= 1 << 2;
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <init_systick+0x50>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <init_systick+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0204 	orr.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
	SysTick->CSR |= 1 << 1;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <init_systick+0x50>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <init_systick+0x50>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0202 	orr.w	r2, r2, #2
 8002386:	601a      	str	r2, [r3, #0]
	SysTick->CSR |= 1;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <init_systick+0x50>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <init_systick+0x50>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20007cd8 	.word	0x20007cd8

080023a8 <main>:
#include "song.h"
#include <stdio.h>
#include <USARTinterrupt.h>

	
int main(void){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80023ac:	f7ff fe80 	bl	80020b0 <System_Clock_Init>
	LED_Init(LED_PIN); //Initializes LED
 80023b0:	2007      	movs	r0, #7
 80023b2:	f7fe fbf3 	bl	8000b9c <LED_Init>
	UART2_Init(); //Initializes USART2
 80023b6:	f7fe fc8f 	bl	8000cd8 <UART2_Init>
	print_help(); //prints help message
 80023ba:	f7ff fba9 	bl	8001b10 <print_help>
	init_systick(); //Sets up systick interrupts
 80023be:	f7ff ffc9 	bl	8002354 <init_systick>
	setup(); //Sets up Blue button interrupts
 80023c2:	f7fe ffe3 	bl	800138c <setup>
	setup_USART(); //Sets up USART interrupts
 80023c6:	f7fe ff73 	bl	80012b0 <setup_USART>
	read_input();
 80023ca:	f7ff fcab 	bl	8001d24 <read_input>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d8:	f7ff ff86 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f000 fcd7 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff ffcf 	bl	80023a8 <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800240c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	20007d30 	.word	0x20007d30
  ldr r2, =_sidata
 8002418:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 800241c:	20007d30 	.word	0x20007d30
  ldr r4, =_ebss
 8002420:	20008680 	.word	0x20008680

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>
	...

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20008534 	.word	0x20008534

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20007cdc 	.word	0x20007cdc

08002488 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e014      	b.n	80024c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fd6e 	bl	8000f8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	795b      	ldrb	r3, [r3, #5]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_DAC_Start+0x16>
 80024de:	2302      	movs	r3, #2
 80024e0:	e03b      	b.n	800255a <HAL_DAC_Start+0x8e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002516:	2b04      	cmp	r3, #4
 8002518:	d118      	bne.n	800254c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	e00f      	b.n	800254c <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800253a:	d107      	bne.n	800254c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0202 	orr.w	r2, r2, #2
 800254a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002566:	b480      	push	{r7}
 8002568:	b087      	sub	sp, #28
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3308      	adds	r3, #8
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e004      	b.n	800259a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	3314      	adds	r3, #20
 8002598:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	795b      	ldrb	r3, [r3, #5]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_DAC_ConfigChannel+0x1c>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e107      	b.n	80027dc <HAL_DAC_ConfigChannel+0x22c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d174      	bne.n	80026ca <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80025e0:	f7ff ff22 	bl	8002428 <HAL_GetTick>
 80025e4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d134      	bne.n	8002656 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025ec:	e011      	b.n	8002612 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025ee:	f7ff ff1b 	bl	8002428 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d90a      	bls.n	8002612 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f043 0208 	orr.w	r2, r3, #8
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2203      	movs	r2, #3
 800260c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0e4      	b.n	80027dc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e6      	bne.n	80025ee <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff ff0d 	bl	8002440 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	6992      	ldr	r2, [r2, #24]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
 8002630:	e01e      	b.n	8002670 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002632:	f7ff fef9 	bl	8002428 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d90a      	bls.n	8002656 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f043 0208 	orr.w	r2, r3, #8
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2203      	movs	r2, #3
 8002650:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0c2      	b.n	80027dc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	2b00      	cmp	r3, #0
 800265e:	dbe8      	blt.n	8002632 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002660:	2001      	movs	r0, #1
 8002662:	f7ff feed 	bl	8002440 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	6992      	ldr	r2, [r2, #24]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	ea02 0103 	and.w	r1, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	21ff      	movs	r1, #255	; 0xff
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	ea02 0103 	and.w	r1, r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d11d      	bne.n	800270e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	221f      	movs	r2, #31
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2207      	movs	r2, #7
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	400a      	ands	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e17f      	b.n	8002af4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8171 	beq.w	8002aee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x40>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d118      	bne.n	80028c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	6939      	ldr	r1, [r7, #16]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80ac 	beq.w	8002aee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <HAL_GPIO_Init+0x330>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	4a5e      	ldr	r2, [pc, #376]	; (8002b14 <HAL_GPIO_Init+0x330>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6613      	str	r3, [r2, #96]	; 0x60
 80029a2:	4b5c      	ldr	r3, [pc, #368]	; (8002b14 <HAL_GPIO_Init+0x330>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ae:	4a5a      	ldr	r2, [pc, #360]	; (8002b18 <HAL_GPIO_Init+0x334>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x242>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x338>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x23e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_GPIO_Init+0x33c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x23a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x340>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x236>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_GPIO_Init+0x344>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x232>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	; (8002b2c <HAL_GPIO_Init+0x348>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x22e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <HAL_GPIO_Init+0x34c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x22a>
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a0e:	2307      	movs	r3, #7
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x244>
 8002a26:	2300      	movs	r3, #0
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a38:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_GPIO_Init+0x334>)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a6a:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a70:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002abe:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae8:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <HAL_GPIO_Init+0x350>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f ae78 	bne.w	80027f4 <HAL_GPIO_Init+0x10>
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	48000800 	.word	0x48000800
 8002b24:	48000c00 	.word	0x48000c00
 8002b28:	48001000 	.word	0x48001000
 8002b2c:	48001400 	.word	0x48001400
 8002b30:	48001800 	.word	0x48001800
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f806 	bl	8002b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <malloc>:
 8002b80:	4b02      	ldr	r3, [pc, #8]	; (8002b8c <malloc+0xc>)
 8002b82:	4601      	mov	r1, r0
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	f000 b82b 	b.w	8002be0 <_malloc_r>
 8002b8a:	bf00      	nop
 8002b8c:	20007d2c 	.word	0x20007d2c

08002b90 <free>:
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <free+0xc>)
 8002b92:	4601      	mov	r1, r0
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f000 b933 	b.w	8002e00 <_free_r>
 8002b9a:	bf00      	nop
 8002b9c:	20007d2c 	.word	0x20007d2c

08002ba0 <sbrk_aligned>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	4e0e      	ldr	r6, [pc, #56]	; (8002bdc <sbrk_aligned+0x3c>)
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	6831      	ldr	r1, [r6, #0]
 8002ba8:	4605      	mov	r5, r0
 8002baa:	b911      	cbnz	r1, 8002bb2 <sbrk_aligned+0x12>
 8002bac:	f000 f8ec 	bl	8002d88 <_sbrk_r>
 8002bb0:	6030      	str	r0, [r6, #0]
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f000 f8e7 	bl	8002d88 <_sbrk_r>
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	d00a      	beq.n	8002bd4 <sbrk_aligned+0x34>
 8002bbe:	1cc4      	adds	r4, r0, #3
 8002bc0:	f024 0403 	bic.w	r4, r4, #3
 8002bc4:	42a0      	cmp	r0, r4
 8002bc6:	d007      	beq.n	8002bd8 <sbrk_aligned+0x38>
 8002bc8:	1a21      	subs	r1, r4, r0
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 f8dc 	bl	8002d88 <_sbrk_r>
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d101      	bne.n	8002bd8 <sbrk_aligned+0x38>
 8002bd4:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd8:	4620      	mov	r0, r4
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	2000853c 	.word	0x2000853c

08002be0 <_malloc_r>:
 8002be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be4:	1ccd      	adds	r5, r1, #3
 8002be6:	f025 0503 	bic.w	r5, r5, #3
 8002bea:	3508      	adds	r5, #8
 8002bec:	2d0c      	cmp	r5, #12
 8002bee:	bf38      	it	cc
 8002bf0:	250c      	movcc	r5, #12
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	4607      	mov	r7, r0
 8002bf6:	db01      	blt.n	8002bfc <_malloc_r+0x1c>
 8002bf8:	42a9      	cmp	r1, r5
 8002bfa:	d905      	bls.n	8002c08 <_malloc_r+0x28>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	2600      	movs	r6, #0
 8002c02:	4630      	mov	r0, r6
 8002c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cdc <_malloc_r+0xfc>
 8002c0c:	f000 f868 	bl	8002ce0 <__malloc_lock>
 8002c10:	f8d8 3000 	ldr.w	r3, [r8]
 8002c14:	461c      	mov	r4, r3
 8002c16:	bb5c      	cbnz	r4, 8002c70 <_malloc_r+0x90>
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	f7ff ffc0 	bl	8002ba0 <sbrk_aligned>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	4604      	mov	r4, r0
 8002c24:	d155      	bne.n	8002cd2 <_malloc_r+0xf2>
 8002c26:	f8d8 4000 	ldr.w	r4, [r8]
 8002c2a:	4626      	mov	r6, r4
 8002c2c:	2e00      	cmp	r6, #0
 8002c2e:	d145      	bne.n	8002cbc <_malloc_r+0xdc>
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	d048      	beq.n	8002cc6 <_malloc_r+0xe6>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	4631      	mov	r1, r6
 8002c38:	4638      	mov	r0, r7
 8002c3a:	eb04 0903 	add.w	r9, r4, r3
 8002c3e:	f000 f8a3 	bl	8002d88 <_sbrk_r>
 8002c42:	4581      	cmp	r9, r0
 8002c44:	d13f      	bne.n	8002cc6 <_malloc_r+0xe6>
 8002c46:	6821      	ldr	r1, [r4, #0]
 8002c48:	1a6d      	subs	r5, r5, r1
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	f7ff ffa7 	bl	8002ba0 <sbrk_aligned>
 8002c52:	3001      	adds	r0, #1
 8002c54:	d037      	beq.n	8002cc6 <_malloc_r+0xe6>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	442b      	add	r3, r5
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d038      	beq.n	8002cd6 <_malloc_r+0xf6>
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	42a2      	cmp	r2, r4
 8002c68:	d12b      	bne.n	8002cc2 <_malloc_r+0xe2>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	e00f      	b.n	8002c90 <_malloc_r+0xb0>
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	1b52      	subs	r2, r2, r5
 8002c74:	d41f      	bmi.n	8002cb6 <_malloc_r+0xd6>
 8002c76:	2a0b      	cmp	r2, #11
 8002c78:	d917      	bls.n	8002caa <_malloc_r+0xca>
 8002c7a:	1961      	adds	r1, r4, r5
 8002c7c:	42a3      	cmp	r3, r4
 8002c7e:	6025      	str	r5, [r4, #0]
 8002c80:	bf18      	it	ne
 8002c82:	6059      	strne	r1, [r3, #4]
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	bf08      	it	eq
 8002c88:	f8c8 1000 	streq.w	r1, [r8]
 8002c8c:	5162      	str	r2, [r4, r5]
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	4638      	mov	r0, r7
 8002c92:	f104 060b 	add.w	r6, r4, #11
 8002c96:	f000 f829 	bl	8002cec <__malloc_unlock>
 8002c9a:	f026 0607 	bic.w	r6, r6, #7
 8002c9e:	1d23      	adds	r3, r4, #4
 8002ca0:	1af2      	subs	r2, r6, r3
 8002ca2:	d0ae      	beq.n	8002c02 <_malloc_r+0x22>
 8002ca4:	1b9b      	subs	r3, r3, r6
 8002ca6:	50a3      	str	r3, [r4, r2]
 8002ca8:	e7ab      	b.n	8002c02 <_malloc_r+0x22>
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	d1dd      	bne.n	8002c6c <_malloc_r+0x8c>
 8002cb0:	f8c8 2000 	str.w	r2, [r8]
 8002cb4:	e7ec      	b.n	8002c90 <_malloc_r+0xb0>
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	6864      	ldr	r4, [r4, #4]
 8002cba:	e7ac      	b.n	8002c16 <_malloc_r+0x36>
 8002cbc:	4634      	mov	r4, r6
 8002cbe:	6876      	ldr	r6, [r6, #4]
 8002cc0:	e7b4      	b.n	8002c2c <_malloc_r+0x4c>
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	e7cc      	b.n	8002c60 <_malloc_r+0x80>
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4638      	mov	r0, r7
 8002ccc:	f000 f80e 	bl	8002cec <__malloc_unlock>
 8002cd0:	e797      	b.n	8002c02 <_malloc_r+0x22>
 8002cd2:	6025      	str	r5, [r4, #0]
 8002cd4:	e7dc      	b.n	8002c90 <_malloc_r+0xb0>
 8002cd6:	605b      	str	r3, [r3, #4]
 8002cd8:	deff      	udf	#255	; 0xff
 8002cda:	bf00      	nop
 8002cdc:	20008538 	.word	0x20008538

08002ce0 <__malloc_lock>:
 8002ce0:	4801      	ldr	r0, [pc, #4]	; (8002ce8 <__malloc_lock+0x8>)
 8002ce2:	f000 b88b 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 8002ce6:	bf00      	nop
 8002ce8:	2000867c 	.word	0x2000867c

08002cec <__malloc_unlock>:
 8002cec:	4801      	ldr	r0, [pc, #4]	; (8002cf4 <__malloc_unlock+0x8>)
 8002cee:	f000 b886 	b.w	8002dfe <__retarget_lock_release_recursive>
 8002cf2:	bf00      	nop
 8002cf4:	2000867c 	.word	0x2000867c

08002cf8 <siprintf>:
 8002cf8:	b40e      	push	{r1, r2, r3}
 8002cfa:	b500      	push	{lr}
 8002cfc:	b09c      	sub	sp, #112	; 0x70
 8002cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8002d00:	9002      	str	r0, [sp, #8]
 8002d02:	9006      	str	r0, [sp, #24]
 8002d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d08:	4809      	ldr	r0, [pc, #36]	; (8002d30 <siprintf+0x38>)
 8002d0a:	9107      	str	r1, [sp, #28]
 8002d0c:	9104      	str	r1, [sp, #16]
 8002d0e:	4909      	ldr	r1, [pc, #36]	; (8002d34 <siprintf+0x3c>)
 8002d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d14:	9105      	str	r1, [sp, #20]
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	a902      	add	r1, sp, #8
 8002d1c:	f000 f916 	bl	8002f4c <_svfiprintf_r>
 8002d20:	9b02      	ldr	r3, [sp, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	b01c      	add	sp, #112	; 0x70
 8002d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d2c:	b003      	add	sp, #12
 8002d2e:	4770      	bx	lr
 8002d30:	20007d2c 	.word	0x20007d2c
 8002d34:	ffff0208 	.word	0xffff0208

08002d38 <_vsiprintf_r>:
 8002d38:	b500      	push	{lr}
 8002d3a:	b09b      	sub	sp, #108	; 0x6c
 8002d3c:	9100      	str	r1, [sp, #0]
 8002d3e:	9104      	str	r1, [sp, #16]
 8002d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d44:	9105      	str	r1, [sp, #20]
 8002d46:	9102      	str	r1, [sp, #8]
 8002d48:	4905      	ldr	r1, [pc, #20]	; (8002d60 <_vsiprintf_r+0x28>)
 8002d4a:	9103      	str	r1, [sp, #12]
 8002d4c:	4669      	mov	r1, sp
 8002d4e:	f000 f8fd 	bl	8002f4c <_svfiprintf_r>
 8002d52:	9b00      	ldr	r3, [sp, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	b01b      	add	sp, #108	; 0x6c
 8002d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d5e:	bf00      	nop
 8002d60:	ffff0208 	.word	0xffff0208

08002d64 <vsiprintf>:
 8002d64:	4613      	mov	r3, r2
 8002d66:	460a      	mov	r2, r1
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4802      	ldr	r0, [pc, #8]	; (8002d74 <vsiprintf+0x10>)
 8002d6c:	6800      	ldr	r0, [r0, #0]
 8002d6e:	f7ff bfe3 	b.w	8002d38 <_vsiprintf_r>
 8002d72:	bf00      	nop
 8002d74:	20007d2c 	.word	0x20007d2c

08002d78 <memset>:
 8002d78:	4402      	add	r2, r0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <memset+0xa>
 8002d80:	4770      	bx	lr
 8002d82:	f803 1b01 	strb.w	r1, [r3], #1
 8002d86:	e7f9      	b.n	8002d7c <memset+0x4>

08002d88 <_sbrk_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4d06      	ldr	r5, [pc, #24]	; (8002da4 <_sbrk_r+0x1c>)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4604      	mov	r4, r0
 8002d90:	4608      	mov	r0, r1
 8002d92:	602b      	str	r3, [r5, #0]
 8002d94:	f7ff fa72 	bl	800227c <_sbrk>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d102      	bne.n	8002da2 <_sbrk_r+0x1a>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	b103      	cbz	r3, 8002da2 <_sbrk_r+0x1a>
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	20008678 	.word	0x20008678

08002da8 <__errno>:
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <__errno+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20007d2c 	.word	0x20007d2c

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	; (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	; (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f000 fbae 	bl	8003528 <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08003710 	.word	0x08003710
 8002df0:	08003710 	.word	0x08003710
 8002df4:	08003710 	.word	0x08003710
 8002df8:	08003714 	.word	0x08003714

08002dfc <__retarget_lock_acquire_recursive>:
 8002dfc:	4770      	bx	lr

08002dfe <__retarget_lock_release_recursive>:
 8002dfe:	4770      	bx	lr

08002e00 <_free_r>:
 8002e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d044      	beq.n	8002e90 <_free_r+0x90>
 8002e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e0a:	9001      	str	r0, [sp, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e12:	bfb8      	it	lt
 8002e14:	18e4      	addlt	r4, r4, r3
 8002e16:	f7ff ff63 	bl	8002ce0 <__malloc_lock>
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <_free_r+0x94>)
 8002e1c:	9801      	ldr	r0, [sp, #4]
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	b933      	cbnz	r3, 8002e30 <_free_r+0x30>
 8002e22:	6063      	str	r3, [r4, #4]
 8002e24:	6014      	str	r4, [r2, #0]
 8002e26:	b003      	add	sp, #12
 8002e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e2c:	f7ff bf5e 	b.w	8002cec <__malloc_unlock>
 8002e30:	42a3      	cmp	r3, r4
 8002e32:	d908      	bls.n	8002e46 <_free_r+0x46>
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	1961      	adds	r1, r4, r5
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	bf01      	itttt	eq
 8002e3c:	6819      	ldreq	r1, [r3, #0]
 8002e3e:	685b      	ldreq	r3, [r3, #4]
 8002e40:	1949      	addeq	r1, r1, r5
 8002e42:	6021      	streq	r1, [r4, #0]
 8002e44:	e7ed      	b.n	8002e22 <_free_r+0x22>
 8002e46:	461a      	mov	r2, r3
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b10b      	cbz	r3, 8002e50 <_free_r+0x50>
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	d9fa      	bls.n	8002e46 <_free_r+0x46>
 8002e50:	6811      	ldr	r1, [r2, #0]
 8002e52:	1855      	adds	r5, r2, r1
 8002e54:	42a5      	cmp	r5, r4
 8002e56:	d10b      	bne.n	8002e70 <_free_r+0x70>
 8002e58:	6824      	ldr	r4, [r4, #0]
 8002e5a:	4421      	add	r1, r4
 8002e5c:	1854      	adds	r4, r2, r1
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	d1e0      	bne.n	8002e26 <_free_r+0x26>
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	6053      	str	r3, [r2, #4]
 8002e6a:	440c      	add	r4, r1
 8002e6c:	6014      	str	r4, [r2, #0]
 8002e6e:	e7da      	b.n	8002e26 <_free_r+0x26>
 8002e70:	d902      	bls.n	8002e78 <_free_r+0x78>
 8002e72:	230c      	movs	r3, #12
 8002e74:	6003      	str	r3, [r0, #0]
 8002e76:	e7d6      	b.n	8002e26 <_free_r+0x26>
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	1961      	adds	r1, r4, r5
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	bf04      	itt	eq
 8002e80:	6819      	ldreq	r1, [r3, #0]
 8002e82:	685b      	ldreq	r3, [r3, #4]
 8002e84:	6063      	str	r3, [r4, #4]
 8002e86:	bf04      	itt	eq
 8002e88:	1949      	addeq	r1, r1, r5
 8002e8a:	6021      	streq	r1, [r4, #0]
 8002e8c:	6054      	str	r4, [r2, #4]
 8002e8e:	e7ca      	b.n	8002e26 <_free_r+0x26>
 8002e90:	b003      	add	sp, #12
 8002e92:	bd30      	pop	{r4, r5, pc}
 8002e94:	20008538 	.word	0x20008538

08002e98 <__ssputs_r>:
 8002e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	688e      	ldr	r6, [r1, #8]
 8002e9e:	461f      	mov	r7, r3
 8002ea0:	42be      	cmp	r6, r7
 8002ea2:	680b      	ldr	r3, [r1, #0]
 8002ea4:	4682      	mov	sl, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	4690      	mov	r8, r2
 8002eaa:	d82c      	bhi.n	8002f06 <__ssputs_r+0x6e>
 8002eac:	898a      	ldrh	r2, [r1, #12]
 8002eae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002eb2:	d026      	beq.n	8002f02 <__ssputs_r+0x6a>
 8002eb4:	6965      	ldr	r5, [r4, #20]
 8002eb6:	6909      	ldr	r1, [r1, #16]
 8002eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ebc:	eba3 0901 	sub.w	r9, r3, r1
 8002ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ec4:	1c7b      	adds	r3, r7, #1
 8002ec6:	444b      	add	r3, r9
 8002ec8:	106d      	asrs	r5, r5, #1
 8002eca:	429d      	cmp	r5, r3
 8002ecc:	bf38      	it	cc
 8002ece:	461d      	movcc	r5, r3
 8002ed0:	0553      	lsls	r3, r2, #21
 8002ed2:	d527      	bpl.n	8002f24 <__ssputs_r+0x8c>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	f7ff fe83 	bl	8002be0 <_malloc_r>
 8002eda:	4606      	mov	r6, r0
 8002edc:	b360      	cbz	r0, 8002f38 <__ssputs_r+0xa0>
 8002ede:	6921      	ldr	r1, [r4, #16]
 8002ee0:	464a      	mov	r2, r9
 8002ee2:	f000 fadb 	bl	800349c <memcpy>
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	6126      	str	r6, [r4, #16]
 8002ef4:	6165      	str	r5, [r4, #20]
 8002ef6:	444e      	add	r6, r9
 8002ef8:	eba5 0509 	sub.w	r5, r5, r9
 8002efc:	6026      	str	r6, [r4, #0]
 8002efe:	60a5      	str	r5, [r4, #8]
 8002f00:	463e      	mov	r6, r7
 8002f02:	42be      	cmp	r6, r7
 8002f04:	d900      	bls.n	8002f08 <__ssputs_r+0x70>
 8002f06:	463e      	mov	r6, r7
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	4632      	mov	r2, r6
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	f000 faab 	bl	8003468 <memmove>
 8002f12:	68a3      	ldr	r3, [r4, #8]
 8002f14:	1b9b      	subs	r3, r3, r6
 8002f16:	60a3      	str	r3, [r4, #8]
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	4433      	add	r3, r6
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f24:	462a      	mov	r2, r5
 8002f26:	f000 fac7 	bl	80034b8 <_realloc_r>
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d1e0      	bne.n	8002ef2 <__ssputs_r+0x5a>
 8002f30:	6921      	ldr	r1, [r4, #16]
 8002f32:	4650      	mov	r0, sl
 8002f34:	f7ff ff64 	bl	8002e00 <_free_r>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	f8ca 3000 	str.w	r3, [sl]
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	81a3      	strh	r3, [r4, #12]
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4a:	e7e9      	b.n	8002f20 <__ssputs_r+0x88>

08002f4c <_svfiprintf_r>:
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	4698      	mov	r8, r3
 8002f52:	898b      	ldrh	r3, [r1, #12]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	b09d      	sub	sp, #116	; 0x74
 8002f58:	4607      	mov	r7, r0
 8002f5a:	460d      	mov	r5, r1
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	d50e      	bpl.n	8002f7e <_svfiprintf_r+0x32>
 8002f60:	690b      	ldr	r3, [r1, #16]
 8002f62:	b963      	cbnz	r3, 8002f7e <_svfiprintf_r+0x32>
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	f7ff fe3b 	bl	8002be0 <_malloc_r>
 8002f6a:	6028      	str	r0, [r5, #0]
 8002f6c:	6128      	str	r0, [r5, #16]
 8002f6e:	b920      	cbnz	r0, 8002f7a <_svfiprintf_r+0x2e>
 8002f70:	230c      	movs	r3, #12
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	e0d0      	b.n	800311c <_svfiprintf_r+0x1d0>
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	616b      	str	r3, [r5, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9309      	str	r3, [sp, #36]	; 0x24
 8002f82:	2320      	movs	r3, #32
 8002f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f8c:	2330      	movs	r3, #48	; 0x30
 8002f8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003134 <_svfiprintf_r+0x1e8>
 8002f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f96:	f04f 0901 	mov.w	r9, #1
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	469a      	mov	sl, r3
 8002f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fa2:	b10a      	cbz	r2, 8002fa8 <_svfiprintf_r+0x5c>
 8002fa4:	2a25      	cmp	r2, #37	; 0x25
 8002fa6:	d1f9      	bne.n	8002f9c <_svfiprintf_r+0x50>
 8002fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8002fac:	d00b      	beq.n	8002fc6 <_svfiprintf_r+0x7a>
 8002fae:	465b      	mov	r3, fp
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f7ff ff6f 	bl	8002e98 <__ssputs_r>
 8002fba:	3001      	adds	r0, #1
 8002fbc:	f000 80a9 	beq.w	8003112 <_svfiprintf_r+0x1c6>
 8002fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc2:	445a      	add	r2, fp
 8002fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8002fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a1 	beq.w	8003112 <_svfiprintf_r+0x1c6>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fda:	f10a 0a01 	add.w	sl, sl, #1
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	9307      	str	r3, [sp, #28]
 8002fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fe8:	4654      	mov	r4, sl
 8002fea:	2205      	movs	r2, #5
 8002fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff0:	4850      	ldr	r0, [pc, #320]	; (8003134 <_svfiprintf_r+0x1e8>)
 8002ff2:	f7fd f905 	bl	8000200 <memchr>
 8002ff6:	9a04      	ldr	r2, [sp, #16]
 8002ff8:	b9d8      	cbnz	r0, 8003032 <_svfiprintf_r+0xe6>
 8002ffa:	06d0      	lsls	r0, r2, #27
 8002ffc:	bf44      	itt	mi
 8002ffe:	2320      	movmi	r3, #32
 8003000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003004:	0711      	lsls	r1, r2, #28
 8003006:	bf44      	itt	mi
 8003008:	232b      	movmi	r3, #43	; 0x2b
 800300a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800300e:	f89a 3000 	ldrb.w	r3, [sl]
 8003012:	2b2a      	cmp	r3, #42	; 0x2a
 8003014:	d015      	beq.n	8003042 <_svfiprintf_r+0xf6>
 8003016:	9a07      	ldr	r2, [sp, #28]
 8003018:	4654      	mov	r4, sl
 800301a:	2000      	movs	r0, #0
 800301c:	f04f 0c0a 	mov.w	ip, #10
 8003020:	4621      	mov	r1, r4
 8003022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003026:	3b30      	subs	r3, #48	; 0x30
 8003028:	2b09      	cmp	r3, #9
 800302a:	d94d      	bls.n	80030c8 <_svfiprintf_r+0x17c>
 800302c:	b1b0      	cbz	r0, 800305c <_svfiprintf_r+0x110>
 800302e:	9207      	str	r2, [sp, #28]
 8003030:	e014      	b.n	800305c <_svfiprintf_r+0x110>
 8003032:	eba0 0308 	sub.w	r3, r0, r8
 8003036:	fa09 f303 	lsl.w	r3, r9, r3
 800303a:	4313      	orrs	r3, r2
 800303c:	9304      	str	r3, [sp, #16]
 800303e:	46a2      	mov	sl, r4
 8003040:	e7d2      	b.n	8002fe8 <_svfiprintf_r+0x9c>
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	1d19      	adds	r1, r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	9103      	str	r1, [sp, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	bfbb      	ittet	lt
 800304e:	425b      	neglt	r3, r3
 8003050:	f042 0202 	orrlt.w	r2, r2, #2
 8003054:	9307      	strge	r3, [sp, #28]
 8003056:	9307      	strlt	r3, [sp, #28]
 8003058:	bfb8      	it	lt
 800305a:	9204      	strlt	r2, [sp, #16]
 800305c:	7823      	ldrb	r3, [r4, #0]
 800305e:	2b2e      	cmp	r3, #46	; 0x2e
 8003060:	d10c      	bne.n	800307c <_svfiprintf_r+0x130>
 8003062:	7863      	ldrb	r3, [r4, #1]
 8003064:	2b2a      	cmp	r3, #42	; 0x2a
 8003066:	d134      	bne.n	80030d2 <_svfiprintf_r+0x186>
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	1d1a      	adds	r2, r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	9203      	str	r2, [sp, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	bfb8      	it	lt
 8003074:	f04f 33ff 	movlt.w	r3, #4294967295
 8003078:	3402      	adds	r4, #2
 800307a:	9305      	str	r3, [sp, #20]
 800307c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003144 <_svfiprintf_r+0x1f8>
 8003080:	7821      	ldrb	r1, [r4, #0]
 8003082:	2203      	movs	r2, #3
 8003084:	4650      	mov	r0, sl
 8003086:	f7fd f8bb 	bl	8000200 <memchr>
 800308a:	b138      	cbz	r0, 800309c <_svfiprintf_r+0x150>
 800308c:	9b04      	ldr	r3, [sp, #16]
 800308e:	eba0 000a 	sub.w	r0, r0, sl
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	4082      	lsls	r2, r0
 8003096:	4313      	orrs	r3, r2
 8003098:	3401      	adds	r4, #1
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a0:	4825      	ldr	r0, [pc, #148]	; (8003138 <_svfiprintf_r+0x1ec>)
 80030a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030a6:	2206      	movs	r2, #6
 80030a8:	f7fd f8aa 	bl	8000200 <memchr>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d038      	beq.n	8003122 <_svfiprintf_r+0x1d6>
 80030b0:	4b22      	ldr	r3, [pc, #136]	; (800313c <_svfiprintf_r+0x1f0>)
 80030b2:	bb1b      	cbnz	r3, 80030fc <_svfiprintf_r+0x1b0>
 80030b4:	9b03      	ldr	r3, [sp, #12]
 80030b6:	3307      	adds	r3, #7
 80030b8:	f023 0307 	bic.w	r3, r3, #7
 80030bc:	3308      	adds	r3, #8
 80030be:	9303      	str	r3, [sp, #12]
 80030c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c2:	4433      	add	r3, r6
 80030c4:	9309      	str	r3, [sp, #36]	; 0x24
 80030c6:	e768      	b.n	8002f9a <_svfiprintf_r+0x4e>
 80030c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80030cc:	460c      	mov	r4, r1
 80030ce:	2001      	movs	r0, #1
 80030d0:	e7a6      	b.n	8003020 <_svfiprintf_r+0xd4>
 80030d2:	2300      	movs	r3, #0
 80030d4:	3401      	adds	r4, #1
 80030d6:	9305      	str	r3, [sp, #20]
 80030d8:	4619      	mov	r1, r3
 80030da:	f04f 0c0a 	mov.w	ip, #10
 80030de:	4620      	mov	r0, r4
 80030e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030e4:	3a30      	subs	r2, #48	; 0x30
 80030e6:	2a09      	cmp	r2, #9
 80030e8:	d903      	bls.n	80030f2 <_svfiprintf_r+0x1a6>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0c6      	beq.n	800307c <_svfiprintf_r+0x130>
 80030ee:	9105      	str	r1, [sp, #20]
 80030f0:	e7c4      	b.n	800307c <_svfiprintf_r+0x130>
 80030f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80030f6:	4604      	mov	r4, r0
 80030f8:	2301      	movs	r3, #1
 80030fa:	e7f0      	b.n	80030de <_svfiprintf_r+0x192>
 80030fc:	ab03      	add	r3, sp, #12
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	462a      	mov	r2, r5
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <_svfiprintf_r+0x1f4>)
 8003104:	a904      	add	r1, sp, #16
 8003106:	4638      	mov	r0, r7
 8003108:	f3af 8000 	nop.w
 800310c:	1c42      	adds	r2, r0, #1
 800310e:	4606      	mov	r6, r0
 8003110:	d1d6      	bne.n	80030c0 <_svfiprintf_r+0x174>
 8003112:	89ab      	ldrh	r3, [r5, #12]
 8003114:	065b      	lsls	r3, r3, #25
 8003116:	f53f af2d 	bmi.w	8002f74 <_svfiprintf_r+0x28>
 800311a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800311c:	b01d      	add	sp, #116	; 0x74
 800311e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003122:	ab03      	add	r3, sp, #12
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	462a      	mov	r2, r5
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <_svfiprintf_r+0x1f4>)
 800312a:	a904      	add	r1, sp, #16
 800312c:	4638      	mov	r0, r7
 800312e:	f000 f879 	bl	8003224 <_printf_i>
 8003132:	e7eb      	b.n	800310c <_svfiprintf_r+0x1c0>
 8003134:	080036dc 	.word	0x080036dc
 8003138:	080036e6 	.word	0x080036e6
 800313c:	00000000 	.word	0x00000000
 8003140:	08002e99 	.word	0x08002e99
 8003144:	080036e2 	.word	0x080036e2

08003148 <_printf_common>:
 8003148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	4616      	mov	r6, r2
 800314e:	4699      	mov	r9, r3
 8003150:	688a      	ldr	r2, [r1, #8]
 8003152:	690b      	ldr	r3, [r1, #16]
 8003154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003158:	4293      	cmp	r3, r2
 800315a:	bfb8      	it	lt
 800315c:	4613      	movlt	r3, r2
 800315e:	6033      	str	r3, [r6, #0]
 8003160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003164:	4607      	mov	r7, r0
 8003166:	460c      	mov	r4, r1
 8003168:	b10a      	cbz	r2, 800316e <_printf_common+0x26>
 800316a:	3301      	adds	r3, #1
 800316c:	6033      	str	r3, [r6, #0]
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	0699      	lsls	r1, r3, #26
 8003172:	bf42      	ittt	mi
 8003174:	6833      	ldrmi	r3, [r6, #0]
 8003176:	3302      	addmi	r3, #2
 8003178:	6033      	strmi	r3, [r6, #0]
 800317a:	6825      	ldr	r5, [r4, #0]
 800317c:	f015 0506 	ands.w	r5, r5, #6
 8003180:	d106      	bne.n	8003190 <_printf_common+0x48>
 8003182:	f104 0a19 	add.w	sl, r4, #25
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	6832      	ldr	r2, [r6, #0]
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	42ab      	cmp	r3, r5
 800318e:	dc26      	bgt.n	80031de <_printf_common+0x96>
 8003190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003194:	1e13      	subs	r3, r2, #0
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	bf18      	it	ne
 800319a:	2301      	movne	r3, #1
 800319c:	0692      	lsls	r2, r2, #26
 800319e:	d42b      	bmi.n	80031f8 <_printf_common+0xb0>
 80031a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031a4:	4649      	mov	r1, r9
 80031a6:	4638      	mov	r0, r7
 80031a8:	47c0      	blx	r8
 80031aa:	3001      	adds	r0, #1
 80031ac:	d01e      	beq.n	80031ec <_printf_common+0xa4>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	6922      	ldr	r2, [r4, #16]
 80031b2:	f003 0306 	and.w	r3, r3, #6
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf02      	ittt	eq
 80031ba:	68e5      	ldreq	r5, [r4, #12]
 80031bc:	6833      	ldreq	r3, [r6, #0]
 80031be:	1aed      	subeq	r5, r5, r3
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	bf0c      	ite	eq
 80031c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c8:	2500      	movne	r5, #0
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bfc4      	itt	gt
 80031ce:	1a9b      	subgt	r3, r3, r2
 80031d0:	18ed      	addgt	r5, r5, r3
 80031d2:	2600      	movs	r6, #0
 80031d4:	341a      	adds	r4, #26
 80031d6:	42b5      	cmp	r5, r6
 80031d8:	d11a      	bne.n	8003210 <_printf_common+0xc8>
 80031da:	2000      	movs	r0, #0
 80031dc:	e008      	b.n	80031f0 <_printf_common+0xa8>
 80031de:	2301      	movs	r3, #1
 80031e0:	4652      	mov	r2, sl
 80031e2:	4649      	mov	r1, r9
 80031e4:	4638      	mov	r0, r7
 80031e6:	47c0      	blx	r8
 80031e8:	3001      	adds	r0, #1
 80031ea:	d103      	bne.n	80031f4 <_printf_common+0xac>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f4:	3501      	adds	r5, #1
 80031f6:	e7c6      	b.n	8003186 <_printf_common+0x3e>
 80031f8:	18e1      	adds	r1, r4, r3
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	2030      	movs	r0, #48	; 0x30
 80031fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003202:	4422      	add	r2, r4
 8003204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800320c:	3302      	adds	r3, #2
 800320e:	e7c7      	b.n	80031a0 <_printf_common+0x58>
 8003210:	2301      	movs	r3, #1
 8003212:	4622      	mov	r2, r4
 8003214:	4649      	mov	r1, r9
 8003216:	4638      	mov	r0, r7
 8003218:	47c0      	blx	r8
 800321a:	3001      	adds	r0, #1
 800321c:	d0e6      	beq.n	80031ec <_printf_common+0xa4>
 800321e:	3601      	adds	r6, #1
 8003220:	e7d9      	b.n	80031d6 <_printf_common+0x8e>
	...

08003224 <_printf_i>:
 8003224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	7e0f      	ldrb	r7, [r1, #24]
 800322a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800322c:	2f78      	cmp	r7, #120	; 0x78
 800322e:	4691      	mov	r9, r2
 8003230:	4680      	mov	r8, r0
 8003232:	460c      	mov	r4, r1
 8003234:	469a      	mov	sl, r3
 8003236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800323a:	d807      	bhi.n	800324c <_printf_i+0x28>
 800323c:	2f62      	cmp	r7, #98	; 0x62
 800323e:	d80a      	bhi.n	8003256 <_printf_i+0x32>
 8003240:	2f00      	cmp	r7, #0
 8003242:	f000 80d4 	beq.w	80033ee <_printf_i+0x1ca>
 8003246:	2f58      	cmp	r7, #88	; 0x58
 8003248:	f000 80c0 	beq.w	80033cc <_printf_i+0x1a8>
 800324c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003254:	e03a      	b.n	80032cc <_printf_i+0xa8>
 8003256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800325a:	2b15      	cmp	r3, #21
 800325c:	d8f6      	bhi.n	800324c <_printf_i+0x28>
 800325e:	a101      	add	r1, pc, #4	; (adr r1, 8003264 <_printf_i+0x40>)
 8003260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003264:	080032bd 	.word	0x080032bd
 8003268:	080032d1 	.word	0x080032d1
 800326c:	0800324d 	.word	0x0800324d
 8003270:	0800324d 	.word	0x0800324d
 8003274:	0800324d 	.word	0x0800324d
 8003278:	0800324d 	.word	0x0800324d
 800327c:	080032d1 	.word	0x080032d1
 8003280:	0800324d 	.word	0x0800324d
 8003284:	0800324d 	.word	0x0800324d
 8003288:	0800324d 	.word	0x0800324d
 800328c:	0800324d 	.word	0x0800324d
 8003290:	080033d5 	.word	0x080033d5
 8003294:	080032fd 	.word	0x080032fd
 8003298:	0800338f 	.word	0x0800338f
 800329c:	0800324d 	.word	0x0800324d
 80032a0:	0800324d 	.word	0x0800324d
 80032a4:	080033f7 	.word	0x080033f7
 80032a8:	0800324d 	.word	0x0800324d
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	0800324d 	.word	0x0800324d
 80032b4:	0800324d 	.word	0x0800324d
 80032b8:	08003397 	.word	0x08003397
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	602a      	str	r2, [r5, #0]
 80032c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032cc:	2301      	movs	r3, #1
 80032ce:	e09f      	b.n	8003410 <_printf_i+0x1ec>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	0607      	lsls	r7, r0, #24
 80032d6:	f103 0104 	add.w	r1, r3, #4
 80032da:	6029      	str	r1, [r5, #0]
 80032dc:	d501      	bpl.n	80032e2 <_printf_i+0xbe>
 80032de:	681e      	ldr	r6, [r3, #0]
 80032e0:	e003      	b.n	80032ea <_printf_i+0xc6>
 80032e2:	0646      	lsls	r6, r0, #25
 80032e4:	d5fb      	bpl.n	80032de <_printf_i+0xba>
 80032e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032ea:	2e00      	cmp	r6, #0
 80032ec:	da03      	bge.n	80032f6 <_printf_i+0xd2>
 80032ee:	232d      	movs	r3, #45	; 0x2d
 80032f0:	4276      	negs	r6, r6
 80032f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f6:	485a      	ldr	r0, [pc, #360]	; (8003460 <_printf_i+0x23c>)
 80032f8:	230a      	movs	r3, #10
 80032fa:	e012      	b.n	8003322 <_printf_i+0xfe>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	1d19      	adds	r1, r3, #4
 8003302:	6029      	str	r1, [r5, #0]
 8003304:	0605      	lsls	r5, r0, #24
 8003306:	d501      	bpl.n	800330c <_printf_i+0xe8>
 8003308:	681e      	ldr	r6, [r3, #0]
 800330a:	e002      	b.n	8003312 <_printf_i+0xee>
 800330c:	0641      	lsls	r1, r0, #25
 800330e:	d5fb      	bpl.n	8003308 <_printf_i+0xe4>
 8003310:	881e      	ldrh	r6, [r3, #0]
 8003312:	4853      	ldr	r0, [pc, #332]	; (8003460 <_printf_i+0x23c>)
 8003314:	2f6f      	cmp	r7, #111	; 0x6f
 8003316:	bf0c      	ite	eq
 8003318:	2308      	moveq	r3, #8
 800331a:	230a      	movne	r3, #10
 800331c:	2100      	movs	r1, #0
 800331e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003322:	6865      	ldr	r5, [r4, #4]
 8003324:	60a5      	str	r5, [r4, #8]
 8003326:	2d00      	cmp	r5, #0
 8003328:	bfa2      	ittt	ge
 800332a:	6821      	ldrge	r1, [r4, #0]
 800332c:	f021 0104 	bicge.w	r1, r1, #4
 8003330:	6021      	strge	r1, [r4, #0]
 8003332:	b90e      	cbnz	r6, 8003338 <_printf_i+0x114>
 8003334:	2d00      	cmp	r5, #0
 8003336:	d04b      	beq.n	80033d0 <_printf_i+0x1ac>
 8003338:	4615      	mov	r5, r2
 800333a:	fbb6 f1f3 	udiv	r1, r6, r3
 800333e:	fb03 6711 	mls	r7, r3, r1, r6
 8003342:	5dc7      	ldrb	r7, [r0, r7]
 8003344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003348:	4637      	mov	r7, r6
 800334a:	42bb      	cmp	r3, r7
 800334c:	460e      	mov	r6, r1
 800334e:	d9f4      	bls.n	800333a <_printf_i+0x116>
 8003350:	2b08      	cmp	r3, #8
 8003352:	d10b      	bne.n	800336c <_printf_i+0x148>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	07de      	lsls	r6, r3, #31
 8003358:	d508      	bpl.n	800336c <_printf_i+0x148>
 800335a:	6923      	ldr	r3, [r4, #16]
 800335c:	6861      	ldr	r1, [r4, #4]
 800335e:	4299      	cmp	r1, r3
 8003360:	bfde      	ittt	le
 8003362:	2330      	movle	r3, #48	; 0x30
 8003364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800336c:	1b52      	subs	r2, r2, r5
 800336e:	6122      	str	r2, [r4, #16]
 8003370:	f8cd a000 	str.w	sl, [sp]
 8003374:	464b      	mov	r3, r9
 8003376:	aa03      	add	r2, sp, #12
 8003378:	4621      	mov	r1, r4
 800337a:	4640      	mov	r0, r8
 800337c:	f7ff fee4 	bl	8003148 <_printf_common>
 8003380:	3001      	adds	r0, #1
 8003382:	d14a      	bne.n	800341a <_printf_i+0x1f6>
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	b004      	add	sp, #16
 800338a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	f043 0320 	orr.w	r3, r3, #32
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	4833      	ldr	r0, [pc, #204]	; (8003464 <_printf_i+0x240>)
 8003398:	2778      	movs	r7, #120	; 0x78
 800339a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	6829      	ldr	r1, [r5, #0]
 80033a2:	061f      	lsls	r7, r3, #24
 80033a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80033a8:	d402      	bmi.n	80033b0 <_printf_i+0x18c>
 80033aa:	065f      	lsls	r7, r3, #25
 80033ac:	bf48      	it	mi
 80033ae:	b2b6      	uxthmi	r6, r6
 80033b0:	07df      	lsls	r7, r3, #31
 80033b2:	bf48      	it	mi
 80033b4:	f043 0320 	orrmi.w	r3, r3, #32
 80033b8:	6029      	str	r1, [r5, #0]
 80033ba:	bf48      	it	mi
 80033bc:	6023      	strmi	r3, [r4, #0]
 80033be:	b91e      	cbnz	r6, 80033c8 <_printf_i+0x1a4>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	f023 0320 	bic.w	r3, r3, #32
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	2310      	movs	r3, #16
 80033ca:	e7a7      	b.n	800331c <_printf_i+0xf8>
 80033cc:	4824      	ldr	r0, [pc, #144]	; (8003460 <_printf_i+0x23c>)
 80033ce:	e7e4      	b.n	800339a <_printf_i+0x176>
 80033d0:	4615      	mov	r5, r2
 80033d2:	e7bd      	b.n	8003350 <_printf_i+0x12c>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6826      	ldr	r6, [r4, #0]
 80033d8:	6961      	ldr	r1, [r4, #20]
 80033da:	1d18      	adds	r0, r3, #4
 80033dc:	6028      	str	r0, [r5, #0]
 80033de:	0635      	lsls	r5, r6, #24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	d501      	bpl.n	80033e8 <_printf_i+0x1c4>
 80033e4:	6019      	str	r1, [r3, #0]
 80033e6:	e002      	b.n	80033ee <_printf_i+0x1ca>
 80033e8:	0670      	lsls	r0, r6, #25
 80033ea:	d5fb      	bpl.n	80033e4 <_printf_i+0x1c0>
 80033ec:	8019      	strh	r1, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	4615      	mov	r5, r2
 80033f4:	e7bc      	b.n	8003370 <_printf_i+0x14c>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	602a      	str	r2, [r5, #0]
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	6862      	ldr	r2, [r4, #4]
 8003400:	2100      	movs	r1, #0
 8003402:	4628      	mov	r0, r5
 8003404:	f7fc fefc 	bl	8000200 <memchr>
 8003408:	b108      	cbz	r0, 800340e <_printf_i+0x1ea>
 800340a:	1b40      	subs	r0, r0, r5
 800340c:	6060      	str	r0, [r4, #4]
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2300      	movs	r3, #0
 8003414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003418:	e7aa      	b.n	8003370 <_printf_i+0x14c>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	462a      	mov	r2, r5
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d0ad      	beq.n	8003384 <_printf_i+0x160>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	079b      	lsls	r3, r3, #30
 800342c:	d413      	bmi.n	8003456 <_printf_i+0x232>
 800342e:	68e0      	ldr	r0, [r4, #12]
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	4298      	cmp	r0, r3
 8003434:	bfb8      	it	lt
 8003436:	4618      	movlt	r0, r3
 8003438:	e7a6      	b.n	8003388 <_printf_i+0x164>
 800343a:	2301      	movs	r3, #1
 800343c:	4632      	mov	r2, r6
 800343e:	4649      	mov	r1, r9
 8003440:	4640      	mov	r0, r8
 8003442:	47d0      	blx	sl
 8003444:	3001      	adds	r0, #1
 8003446:	d09d      	beq.n	8003384 <_printf_i+0x160>
 8003448:	3501      	adds	r5, #1
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	9903      	ldr	r1, [sp, #12]
 800344e:	1a5b      	subs	r3, r3, r1
 8003450:	42ab      	cmp	r3, r5
 8003452:	dcf2      	bgt.n	800343a <_printf_i+0x216>
 8003454:	e7eb      	b.n	800342e <_printf_i+0x20a>
 8003456:	2500      	movs	r5, #0
 8003458:	f104 0619 	add.w	r6, r4, #25
 800345c:	e7f5      	b.n	800344a <_printf_i+0x226>
 800345e:	bf00      	nop
 8003460:	080036ed 	.word	0x080036ed
 8003464:	080036fe 	.word	0x080036fe

08003468 <memmove>:
 8003468:	4288      	cmp	r0, r1
 800346a:	b510      	push	{r4, lr}
 800346c:	eb01 0402 	add.w	r4, r1, r2
 8003470:	d902      	bls.n	8003478 <memmove+0x10>
 8003472:	4284      	cmp	r4, r0
 8003474:	4623      	mov	r3, r4
 8003476:	d807      	bhi.n	8003488 <memmove+0x20>
 8003478:	1e43      	subs	r3, r0, #1
 800347a:	42a1      	cmp	r1, r4
 800347c:	d008      	beq.n	8003490 <memmove+0x28>
 800347e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003486:	e7f8      	b.n	800347a <memmove+0x12>
 8003488:	4402      	add	r2, r0
 800348a:	4601      	mov	r1, r0
 800348c:	428a      	cmp	r2, r1
 800348e:	d100      	bne.n	8003492 <memmove+0x2a>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800349a:	e7f7      	b.n	800348c <memmove+0x24>

0800349c <memcpy>:
 800349c:	440a      	add	r2, r1
 800349e:	4291      	cmp	r1, r2
 80034a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034a4:	d100      	bne.n	80034a8 <memcpy+0xc>
 80034a6:	4770      	bx	lr
 80034a8:	b510      	push	{r4, lr}
 80034aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034b2:	4291      	cmp	r1, r2
 80034b4:	d1f9      	bne.n	80034aa <memcpy+0xe>
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <_realloc_r>:
 80034b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034bc:	4680      	mov	r8, r0
 80034be:	4614      	mov	r4, r2
 80034c0:	460e      	mov	r6, r1
 80034c2:	b921      	cbnz	r1, 80034ce <_realloc_r+0x16>
 80034c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c8:	4611      	mov	r1, r2
 80034ca:	f7ff bb89 	b.w	8002be0 <_malloc_r>
 80034ce:	b92a      	cbnz	r2, 80034dc <_realloc_r+0x24>
 80034d0:	f7ff fc96 	bl	8002e00 <_free_r>
 80034d4:	4625      	mov	r5, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034dc:	f000 f81b 	bl	8003516 <_malloc_usable_size_r>
 80034e0:	4284      	cmp	r4, r0
 80034e2:	4607      	mov	r7, r0
 80034e4:	d802      	bhi.n	80034ec <_realloc_r+0x34>
 80034e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034ea:	d812      	bhi.n	8003512 <_realloc_r+0x5a>
 80034ec:	4621      	mov	r1, r4
 80034ee:	4640      	mov	r0, r8
 80034f0:	f7ff fb76 	bl	8002be0 <_malloc_r>
 80034f4:	4605      	mov	r5, r0
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d0ed      	beq.n	80034d6 <_realloc_r+0x1e>
 80034fa:	42bc      	cmp	r4, r7
 80034fc:	4622      	mov	r2, r4
 80034fe:	4631      	mov	r1, r6
 8003500:	bf28      	it	cs
 8003502:	463a      	movcs	r2, r7
 8003504:	f7ff ffca 	bl	800349c <memcpy>
 8003508:	4631      	mov	r1, r6
 800350a:	4640      	mov	r0, r8
 800350c:	f7ff fc78 	bl	8002e00 <_free_r>
 8003510:	e7e1      	b.n	80034d6 <_realloc_r+0x1e>
 8003512:	4635      	mov	r5, r6
 8003514:	e7df      	b.n	80034d6 <_realloc_r+0x1e>

08003516 <_malloc_usable_size_r>:
 8003516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800351a:	1f18      	subs	r0, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	bfbc      	itt	lt
 8003520:	580b      	ldrlt	r3, [r1, r0]
 8003522:	18c0      	addlt	r0, r0, r3
 8003524:	4770      	bx	lr
	...

08003528 <_init>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

08003534 <_fini>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr
